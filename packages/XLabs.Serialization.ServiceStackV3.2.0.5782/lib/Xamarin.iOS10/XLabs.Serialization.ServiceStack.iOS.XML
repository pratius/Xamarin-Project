<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XLabs.Serialization.ServiceStack.iOS</name>
    </assembly>
    <members>
        <member name="T:ServiceStack.Text.AssemblyUtils">
            <summary>
            Utils to load types
            </summary>
        </member>
        <member name="F:ServiceStack.Text.AssemblyUtils.FileUri">
            <summary>
            The file URI
            </summary>
        </member>
        <member name="F:ServiceStack.Text.AssemblyUtils.DllExt">
            <summary>
            The DLL ext
            </summary>
        </member>
        <member name="F:ServiceStack.Text.AssemblyUtils.ExeExt">
            <summary>
            The executable ext
            </summary>
        </member>
        <member name="F:ServiceStack.Text.AssemblyUtils.UriSeperator">
            <summary>
            The URI seperator
            </summary>
        </member>
        <member name="F:ServiceStack.Text.AssemblyUtils.TypeCache">
            <summary>
            The type cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.AssemblyUtils.FindType(System.String)">
            <summary>
            Find the type from the name supplied
            </summary>
            <param name="typeName">[typeName] or [typeName, assemblyName]</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.AssemblyUtils.MainInterface``1">
            <summary>
            The top-most interface of the given type, if any.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.AssemblyUtils.FindType(System.String,System.String)">
            <summary>
            Find type if it exists
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>The type if it exists</returns>
        </member>
        <member name="M:ServiceStack.Text.AssemblyUtils.FindTypeFromLoadedAssemblies(System.String)">
            <summary>
            Finds the type from loaded assemblies.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.AssemblyUtils.GetAssemblyBinPath(System.Reflection.Assembly)">
            <summary>
            Gets the assembly bin path.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.AssemblyUtils.ToTypeString(System.Type)">
            <summary>
            To the type string.
            </summary>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.AssemblyUtils.WriteType(System.Type)">
            <summary>
            Writes the type.
            </summary>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.Text.CollectionExtensions">
            <summary>
            Class CollectionExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CollectionExtensions.CreateAndPopulate``1(System.Type,``0[])">
            <summary>
            Creates the and populate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ofCollectionType">Type of the of collection.</param>
            <param name="withItems">The with items.</param>
            <returns>ICollection&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.CollectionExtensions.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            To the array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <returns>T[].</returns>
        </member>
        <member name="M:ServiceStack.Text.CollectionExtensions.Convert``1(System.Object,System.Type)">
            <summary>
            Converts the specified object collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objCollection">The object collection.</param>
            <param name="toCollectionType">Type of to collection.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.DateTimeSerializer">
            <summary>
            Class DateTimeSerializer.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.ShortDateTimeFormat">
            <summary>
            The short date time format
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.DefaultDateTimeFormat">
            <summary>
            The default date time format
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.DefaultDateTimeFormatWithFraction">
            <summary>
            The default date time format with fraction
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.XsdDateTimeFormat">
            <summary>
            The XSD date time format
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.XsdDateTimeFormat3F">
            <summary>
            The XSD date time format3 f
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.XsdDateTimeFormatSeconds">
            <summary>
            The XSD date time format seconds
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.DateTimeFormatSecondsUtcOffset">
            <summary>
            The date time format seconds UTC offset
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.DateTimeFormatTicksUtcOffset">
            <summary>
            The date time format ticks UTC offset
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.EscapedWcfJsonPrefix">
            <summary>
            The escaped WCF json prefix
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.EscapedWcfJsonSuffix">
            <summary>
            The escaped WCF json suffix
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.WcfJsonPrefix">
            <summary>
            The WCF json prefix
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.WcfJsonSuffix">
            <summary>
            The WCF json suffix
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.UnspecifiedOffset">
            <summary>
            The unspecified offset
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.UtcOffset">
            <summary>
            The UTC offset
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.Prepare(System.DateTime,System.Boolean)">
            <summary>
            If AlwaysUseUtc is set to true then convert all DateTime to UTC.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="parsedAsUtc">if set to <c>true</c> [parsed as UTC].</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseShortestNullableXsdDateTime(System.String)">
            <summary>
            Parses the shortest nullable XSD date time.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>System.Nullable&lt;DateTime&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseShortestXsdDateTime(System.String)">
            <summary>
            Parses the shortest XSD date time.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseManual(System.String)">
            <summary>
            Parses the manual.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>System.Nullable&lt;DateTime&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ToDateTimeString(System.DateTime)">
            <summary>
            To the date time string.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseDateTime(System.String)">
            <summary>
            Parses the date time.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseDateTimeOffset(System.String)">
            <summary>
            Parses the date time offset.
            </summary>
            <param name="dateTimeOffsetStr">The date time offset string.</param>
            <returns>DateTimeOffset.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ToXsdDateTimeString(System.DateTime)">
            <summary>
            To the XSD date time string.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ToXsdTimeSpanString(System.TimeSpan)">
            <summary>
            To the XSD time span string.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ToXsdTimeSpanString(System.Nullable{System.TimeSpan})">
            <summary>
            To the XSD time span string.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseXsdDateTime(System.String)">
            <summary>
            Parses the XSD date time.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseTimeSpan(System.String)">
            <summary>
            Parses the time span.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseXsdTimeSpan(System.String)">
            <summary>
            Parses the XSD time span.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseNullableTimeSpan(System.String)">
            <summary>
            Parses the nullable time span.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>System.Nullable&lt;TimeSpan&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseXsdNullableTimeSpan(System.String)">
            <summary>
            Parses the XSD nullable time span.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>System.Nullable&lt;TimeSpan&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ToShortestXsdDateTimeString(System.DateTime)">
            <summary>
            To the shortest XSD date time string.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.String.</returns>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.TimeZoneChars">
            <summary>
            The time zone chars
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseWcfJsonDateOffset(System.String)">
            <summary>
            WCF Json format: /Date(unixts+0000)/
            </summary>
            <param name="wcfJsonDate">The WCF json date.</param>
            <returns>DateTimeOffset.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseWcfJsonDate(System.String)">
            <summary>
            WCF Json format: /Date(unixts+0000)/
            </summary>
            <param name="wcfJsonDate">The WCF json date.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="F:ServiceStack.Text.Common.DateTimeSerializer.LocalTimeZone">
            <summary>
            The local time zone
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.WriteWcfJsonDate(System.IO.TextWriter,System.DateTime)">
            <summary>
            Writes the WCF json date.
            </summary>
            <param name="writer">The writer.</param>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ToWcfJsonDate(System.DateTime)">
            <summary>
            To the WCF json date.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.WriteWcfJsonDateTimeOffset(System.IO.TextWriter,System.DateTimeOffset)">
            <summary>
            Writes the WCF json date time offset.
            </summary>
            <param name="writer">The writer.</param>
            <param name="dateTimeOffset">The date time offset.</param>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ToWcfJsonDateTimeOffset(System.DateTimeOffset)">
            <summary>
            To the WCF json date time offset.
            </summary>
            <param name="dateTimeOffset">The date time offset.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeArrayWithElements`1">
            <summary>
            Class DeserializeArrayWithElements.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeArrayWithElements`1.ParseDelegateCache">
            <summary>
            The parse delegate cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeArrayWithElements`1.GetParseFn(System.Type)">
            <summary>
            Gets the parse function.
            </summary>
            <param name="type">The type.</param>
            <returns>Func&lt;System.String, ParseStringDelegate, System.Object&gt;.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeArrayWithElements`1.ParseArrayOfElementsDelegate">
            <summary>
            Delegate ParseArrayOfElementsDelegate
            </summary>
            <param name="value">The value.</param>
            <param name="parseFn">The parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeArrayWithElements`2">
            <summary>
            Class DeserializeArrayWithElements.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeArrayWithElements`2.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeArrayWithElements`2.ParseGenericArray(System.String,ServiceStack.Text.Common.ParseStringDelegate)">
            <summary>
            Parses the generic array.
            </summary>
            <param name="value">The value.</param>
            <param name="elementParseFn">The element parse function.</param>
            <returns>T[].</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeArray`1">
            <summary>
            Class DeserializeArray.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeArray`1.ParseDelegateCache">
            <summary>
            The parse delegate cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeArray`1.GetParseFn(System.Type)">
            <summary>
            Gets the parse function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeArray`2">
            <summary>
            Class DeserializeArray.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeArray`2.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeArray`2.CacheFn">
            <summary>
            The cache function
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeArray`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.Common.DeserializeArray`2"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeArray`2.GetParseFn">
            <summary>
            Gets the parse function.
            </summary>
            <returns>ParseStringDelegate.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeArray`2.ParseStringArray(System.String)">
            <summary>
            Parses the string array.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeArray`2.ParseByteArray(System.String)">
            <summary>
            Parses the byte array.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="P:ServiceStack.Text.Common.DeserializeArray`2.Parse">
            <summary>
            Gets the parse.
            </summary>
            <value>The parse.</value>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeBuiltin`1">
            <summary>
            Class DeserializeBuiltin.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeBuiltin`1.CachedParseFn">
            <summary>
            The cached parse function
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeBuiltin`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.Common.DeserializeBuiltin`1"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeBuiltin`1.GetParseFn">
            <summary>
            Gets the parse function.
            </summary>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="P:ServiceStack.Text.Common.DeserializeBuiltin`1.Parse">
            <summary>
            Gets the parse.
            </summary>
            <value>The parse.</value>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeCollection`1">
            <summary>
            Class DeserializeCollection.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeCollection`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeCollection`1.GetParseMethod(System.Type)">
            <summary>
            Gets the parse method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeCollection`1.ParseStringCollection(System.String,System.Type)">
            <summary>
            Parses the string collection.
            </summary>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <returns>ICollection&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeCollection`1.ParseIntCollection(System.String,System.Type)">
            <summary>
            Parses the int collection.
            </summary>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <returns>ICollection&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeCollection`1.ParseCollection``1(System.String,System.Type,ServiceStack.Text.Common.ParseStringDelegate)">
            <summary>
            Parses the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <param name="parseFn">The parse function.</param>
            <returns>ICollection&lt;T&gt;.</returns>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeCollection`1.ParseDelegateCache">
            <summary>
            The parse delegate cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeCollection`1.ParseCollectionType(System.String,System.Type,System.Type,ServiceStack.Text.Common.ParseStringDelegate)">
            <summary>
            Parses the type of the collection.
            </summary>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <param name="elementType">Type of the element.</param>
            <param name="parseFn">The parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeCollection`1.ParseCollectionDelegate">
            <summary>
            Delegate ParseCollectionDelegate
            </summary>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <param name="parseFn">The parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeDictionary`1">
            <summary>
            Class DeserializeDictionary.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeDictionary`1.KeyIndex">
            <summary>
            The key index
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeDictionary`1.ValueIndex">
            <summary>
            The value index
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeDictionary`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeDictionary`1.GetParseMethod(System.Type)">
            <summary>
            Gets the parse method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeDictionary`1.ParseJsonObject(System.String)">
            <summary>
            Parses the json object.
            </summary>
            <param name="value">The value.</param>
            <returns>JsonObject.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeDictionary`1.ParseHashtable(System.String)">
            <summary>
            Parses the hashtable.
            </summary>
            <param name="value">The value.</param>
            <returns>Hashtable.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeDictionary`1.ParseStringDictionary(System.String)">
            <summary>
            Parses the string dictionary.
            </summary>
            <param name="value">The value.</param>
            <returns>Dictionary&lt;System.String, System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeDictionary`1.ParseDictionary``2(System.String,System.Type,ServiceStack.Text.Common.ParseStringDelegate,ServiceStack.Text.Common.ParseStringDelegate)">
            <summary>
            Parses the dictionary.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <param name="parseKeyFn">The parse key function.</param>
            <param name="parseValueFn">The parse value function.</param>
            <returns>IDictionary&lt;TKey, TValue&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeDictionary`1.VerifyAndGetStartIndex(System.String,System.Type)">
            <summary>
            Verifies the start index of the and get.
            </summary>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeDictionary`1.ParseDelegateCache">
            <summary>
            The parse delegate cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeDictionary`1.ParseDictionaryType(System.String,System.Type,System.Type[],ServiceStack.Text.Common.ParseStringDelegate,ServiceStack.Text.Common.ParseStringDelegate)">
            <summary>
            Parses the type of the dictionary.
            </summary>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <param name="argTypes">The argument types.</param>
            <param name="keyParseFn">The key parse function.</param>
            <param name="valueParseFn">The value parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeDictionary`1.GetTypesKey(System.Type[])">
            <summary>
            Gets the types key.
            </summary>
            <param name="types">The types.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeDictionary`1.ParseDictionaryDelegate">
            <summary>
            Delegate ParseDictionaryDelegate
            </summary>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <param name="keyParseFn">The key parse function.</param>
            <param name="valueParseFn">The value parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeKeyValuePair`1">
            <summary>
            Class DeserializeKeyValuePair.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeKeyValuePair`1.KeyIndex">
            <summary>
            The key index
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeKeyValuePair`1.ValueIndex">
            <summary>
            The value index
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeKeyValuePair`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeKeyValuePair`1.GetParseMethod(System.Type)">
            <summary>
            Gets the parse method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeKeyValuePair`1.ParseKeyValuePair``2(System.String,System.Type,ServiceStack.Text.Common.ParseStringDelegate,ServiceStack.Text.Common.ParseStringDelegate)">
            <summary>
            Parses the key value pair.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <param name="parseKeyFn">The parse key function.</param>
            <param name="parseValueFn">The parse value function.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Incorrect KeyValuePair property:  + key</exception>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeKeyValuePair`1.VerifyAndGetStartIndex(System.String,System.Type)">
            <summary>
            Verifies the start index of the and get.
            </summary>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="F:ServiceStack.Text.Common.DeserializeKeyValuePair`1.ParseDelegateCache">
            <summary>
            The parse delegate cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeKeyValuePair`1.ParseKeyValuePairType(System.String,System.Type,System.Type[],ServiceStack.Text.Common.ParseStringDelegate,ServiceStack.Text.Common.ParseStringDelegate)">
            <summary>
            Parses the type of the key value pair.
            </summary>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <param name="argTypes">The argument types.</param>
            <param name="keyParseFn">The key parse function.</param>
            <param name="valueParseFn">The value parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeKeyValuePair`1.GetTypesKey(System.Type[])">
            <summary>
            Gets the types key.
            </summary>
            <param name="types">The types.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeKeyValuePair`1.ParseKeyValuePairDelegate">
            <summary>
            Delegate ParseKeyValuePairDelegate
            </summary>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <param name="keyParseFn">The key parse function.</param>
            <param name="valueParseFn">The value parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.DeserializeTypeUtils">
            <summary>
            Class DeserializeTypeUtils.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeTypeUtils.GetParseMethod(System.Type)">
            <summary>
            Gets the parse method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeTypeUtils.GetTypeStringConstructor(System.Type)">
            <summary>
            Get the type(string) constructor if exists
            </summary>
            <param name="type">The type.</param>
            <returns>ConstructorInfo.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.WriteListDelegate">
            <summary>
            Delegate WriteListDelegate
            </summary>
            <param name="writer">The writer.</param>
            <param name="oList">The o list.</param>
            <param name="toStringFn">To string function.</param>
        </member>
        <member name="T:ServiceStack.Text.Common.WriteGenericListDelegate`1">
            <summary>
            Delegate WriteGenericListDelegate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="writer">The writer.</param>
            <param name="list">The list.</param>
            <param name="toStringFn">To string function.</param>
        </member>
        <member name="T:ServiceStack.Text.Common.WriteDelegate">
            <summary>
            Delegate WriteDelegate
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ServiceStack.Text.Common.ParseFactoryDelegate">
            <summary>
            Delegate ParseFactoryDelegate
            </summary>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.WriteObjectDelegate">
            <summary>
            Delegate WriteObjectDelegate
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="T:ServiceStack.Text.Common.SetPropertyDelegate">
            <summary>
            Delegate SetPropertyDelegate
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyValue">The property value.</param>
        </member>
        <member name="T:ServiceStack.Text.Common.ParseStringDelegate">
            <summary>
            Delegate ParseStringDelegate
            </summary>
            <param name="stringValue">The string value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.ConvertObjectDelegate">
            <summary>
            Delegate ConvertObjectDelegate
            </summary>
            <param name="fromObject">From object.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.ConvertInstanceDelegate">
            <summary>
            Delegate ConvertInstanceDelegate
            </summary>
            <param name="obj">The object.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.JsWriter">
            <summary>
            Class JsWriter.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.TypeAttr">
            <summary>
            The type attribute
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.MapStartChar">
            <summary>
            The map start character
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.MapKeySeperator">
            <summary>
            The map key seperator
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.ItemSeperator">
            <summary>
            The item seperator
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.MapEndChar">
            <summary>
            The map end character
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.MapNullValue">
            <summary>
            The map null value
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.EmptyMap">
            <summary>
            The empty map
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.ListStartChar">
            <summary>
            The list start character
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.ListEndChar">
            <summary>
            The list end character
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.ReturnChar">
            <summary>
            The return character
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.LineFeedChar">
            <summary>
            The line feed character
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.QuoteChar">
            <summary>
            The quote character
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.QuoteString">
            <summary>
            The quote string
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.EscapedQuoteString">
            <summary>
            The escaped quote string
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.ItemSeperatorString">
            <summary>
            The item seperator string
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.MapKeySeperatorString">
            <summary>
            The map key seperator string
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.LengthFromLargestChar">
            <summary>
            The length from largest character
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.CsvChars">
            <summary>
            The CSV chars
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.EscapeChars">
            <summary>
            The escape chars
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter.EscapeCharFlags">
            <summary>
            The escape character flags
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.Common.JsWriter"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter.WriteDynamic(System.Action)">
            <summary>
            Writes the dynamic.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter.HasAnyEscapeChars(System.String)">
            <summary>
            micro optimizations: using flags instead of value.IndexOfAny(EscapeChars)
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [has any escape chars] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter.WriteItemSeperatorIfRanOnce(System.IO.TextWriter,System.Boolean@)">
            <summary>
            Writes the item seperator if ran once.
            </summary>
            <param name="writer">The writer.</param>
            <param name="ranOnce">if set to <c>true</c> [ran once].</param>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter.ShouldUseDefaultToStringMethod(System.Type)">
            <summary>
            Shoulds the use default to string method.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter.GetTypeSerializer``1">
            <summary>
            Gets the type serializer.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <returns>ITypeSerializer.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter.WriteEnumFlags(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the enum flags.
            </summary>
            <param name="writer">The writer.</param>
            <param name="enumFlagValue">The enum flag value.</param>
        </member>
        <member name="T:ServiceStack.Text.Common.JsWriter`1">
            <summary>
            Class JsWriter.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Text.Common.JsWriter`1"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter`1.GetValueTypeToStringMethod(System.Type)">
            <summary>
            Gets the value type to string method.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter`1.GetWriteFn``1">
            <summary>
            Gets the write function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter`1.GetCoreWriteFn``1">
            <summary>
            Gets the core write function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="F:ServiceStack.Text.Common.JsWriter`1.SpecialTypes">
            <summary>
            The special types
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter`1.GetSpecialWriteFn(System.Type)">
            <summary>
            Gets the special write function.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter`1.WriteType(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the type.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ServiceStack.Text.Common.ParseDelegate">
            <summary>
            Delegate ParseDelegate
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.ParseMethodUtilities">
            <summary>
            Class ParseMethodUtilities.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.ParseMethodUtilities.GetParseFn``1(System.String)">
            <summary>
            Gets the parse function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parseMethod">The parse method.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="T:ServiceStack.Text.Common.StaticParseMethod`1">
            <summary>
            Class StaticParseMethod.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.Common.StaticParseMethod`1.ParseMethod">
            <summary>
            The parse method
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.StaticParseMethod`1.CacheFn">
            <summary>
            The cache function
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.StaticParseMethod`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.Common.StaticParseMethod`1"/> class.
            </summary>
        </member>
        <member name="P:ServiceStack.Text.Common.StaticParseMethod`1.Parse">
            <summary>
            Gets the parse.
            </summary>
            <value>The parse.</value>
        </member>
        <member name="T:ServiceStack.Text.Common.StaticParseRefTypeMethod`2">
            <summary>
            Class StaticParseRefTypeMethod.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.Common.StaticParseRefTypeMethod`2.ParseMethod">
            <summary>
            The parse method
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Common.StaticParseRefTypeMethod`2.CacheFn">
            <summary>
            The cache function
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Common.StaticParseRefTypeMethod`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.Common.StaticParseRefTypeMethod`2"/> class.
            </summary>
        </member>
        <member name="P:ServiceStack.Text.Common.StaticParseRefTypeMethod`2.Parse">
            <summary>
            Gets the parse.
            </summary>
            <value>The parse.</value>
        </member>
        <member name="T:ServiceStack.Text.Controller.CommandProcessor">
            <summary>
            Class CommandProcessor.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Controller.CommandProcessor.contextMap">
            <summary>
            The context map
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Controller.CommandProcessor.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Text.Controller.CommandProcessor"/> class.
            </summary>
            <param name="controllers">The controllers.</param>
        </member>
        <member name="M:ServiceStack.Text.Controller.CommandProcessor.Invoke(System.String)">
            <summary>
            Invokes the specified command URI.
            </summary>
            <param name="commandUri">The command URI.</param>
            <exception cref="T:System.Exception">
            UnknownContext:  + controllerName
            or
            InvalidCommand
            </exception>
        </member>
        <member name="M:ServiceStack.Text.Controller.CommandProcessor.ConvertValuesToTypes(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Type})">
            <summary>
            Converts the values to types.
            </summary>
            <param name="values">The values.</param>
            <param name="types">The types.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="P:ServiceStack.Text.Controller.CommandProcessor.Controllers">
            <summary>
            Gets or sets the controllers.
            </summary>
            <value>The controllers.</value>
        </member>
        <member name="T:ServiceStack.Text.Controller.PathInfo">
            <summary>
            Class to hold
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Controller.PathInfo.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Text.Controller.PathInfo"/> class.
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ServiceStack.Text.Controller.PathInfo.#ctor(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Text.Controller.PathInfo"/> class.
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="arguments">The arguments.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:ServiceStack.Text.Controller.PathInfo.GetArgumentValue``1(System.Int32)">
            <summary>
            Gets the argument value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index">The index.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.Controller.PathInfo.Parse(System.String)">
            <summary>
            Parses the specified path URI.
            </summary>
            <param name="pathUri">The path URI.</param>
            <returns>PathInfo.</returns>
        </member>
        <member name="P:ServiceStack.Text.Controller.PathInfo.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>The name of the controller.</value>
        </member>
        <member name="P:ServiceStack.Text.Controller.PathInfo.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>The name of the action.</value>
        </member>
        <member name="P:ServiceStack.Text.Controller.PathInfo.Arguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:ServiceStack.Text.Controller.PathInfo.Options">
            <summary>
            Gets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:ServiceStack.Text.Controller.PathInfo.FirstArgument">
            <summary>
            Gets the first argument.
            </summary>
            <value>The first argument.</value>
        </member>
        <member name="T:ServiceStack.Text.CsvBehavior">
            <summary>
            Enum CsvBehavior
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvBehavior.FirstEnumerable">
            <summary>
            The first enumerable
            </summary>
        </member>
        <member name="T:ServiceStack.Text.CsvAttribute">
            <summary>
            Class CsvAttribute.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvAttribute.#ctor(ServiceStack.Text.CsvBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Text.CsvAttribute"/> class.
            </summary>
            <param name="csvBehavior">The CSV behavior.</param>
        </member>
        <member name="P:ServiceStack.Text.CsvAttribute.CsvBehavior">
            <summary>
            Gets or sets the CSV behavior.
            </summary>
            <value>The CSV behavior.</value>
        </member>
        <member name="T:ServiceStack.Text.CsvConfig">
            <summary>
            Class CsvConfig.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig.DefaultEscapedItemDelimiterString">
            <summary>
            The default escaped item delimiter string
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvConfig.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.CsvConfig"/> class.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig.tsItemSeperatorString">
            <summary>
            The ts item seperator string
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig.sItemSeperatorString">
            <summary>
            The s item seperator string
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig.tsItemDelimiterString">
            <summary>
            The ts item delimiter string
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig.sItemDelimiterString">
            <summary>
            The s item delimiter string
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig.tsEscapedItemDelimiterString">
            <summary>
            The ts escaped item delimiter string
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig.sEscapedItemDelimiterString">
            <summary>
            The s escaped item delimiter string
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig.defaultEscapeStrings">
            <summary>
            The default escape strings
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig.tsEscapeStrings">
            <summary>
            The ts escape strings
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig.sEscapeStrings">
            <summary>
            The s escape strings
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvConfig.GetEscapeStrings">
            <summary>
            Gets the escape strings.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.Text.CsvConfig.ResetEscapeStrings">
            <summary>
            Resets the escape strings.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig.tsRowSeparatorString">
            <summary>
            The ts row separator string
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig.sRowSeparatorString">
            <summary>
            The s row separator string
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvConfig.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="P:ServiceStack.Text.CsvConfig.ItemSeperatorString">
            <summary>
            Gets or sets the item seperator string.
            </summary>
            <value>The item seperator string.</value>
        </member>
        <member name="P:ServiceStack.Text.CsvConfig.ItemDelimiterString">
            <summary>
            Gets or sets the item delimiter string.
            </summary>
            <value>The item delimiter string.</value>
        </member>
        <member name="P:ServiceStack.Text.CsvConfig.EscapedItemDelimiterString">
            <summary>
            Gets or sets the escaped item delimiter string.
            </summary>
            <value>The escaped item delimiter string.</value>
        </member>
        <member name="P:ServiceStack.Text.CsvConfig.EscapeStrings">
            <summary>
            Gets the escape strings.
            </summary>
            <value>The escape strings.</value>
        </member>
        <member name="P:ServiceStack.Text.CsvConfig.RowSeparatorString">
            <summary>
            Gets or sets the row separator string.
            </summary>
            <value>The row separator string.</value>
        </member>
        <member name="T:ServiceStack.Text.CsvConfig`1">
            <summary>
            Class CsvConfig.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.CsvConfig`1.customHeadersMap">
            <summary>
            The custom headers map
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvConfig`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="P:ServiceStack.Text.CsvConfig`1.OmitHeaders">
            <summary>
            Gets or sets a value indicating whether [omit headers].
            </summary>
            <value><c>true</c> if [omit headers]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.CsvConfig`1.CustomHeadersMap">
            <summary>
            Gets or sets the custom headers map.
            </summary>
            <value>The custom headers map.</value>
        </member>
        <member name="P:ServiceStack.Text.CsvConfig`1.CustomHeaders">
            <summary>
            Sets the custom headers.
            </summary>
            <value>The custom headers.</value>
            <exception cref="T:System.ArgumentException">CustomHeaders is a ValueType</exception>
        </member>
        <member name="T:ServiceStack.Text.CsvSerializer">
            <summary>
            Class CsvSerializer.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvSerializer.UTF8EncodingWithoutBom">
            <summary>
            The ut f8 encoding without bom
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvSerializer.WriteFnCache">
            <summary>
            The write function cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer.GetWriteFn(System.Type)">
            <summary>
            Gets the write function.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer.SerializeToCsv``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Serializes to CSV.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="records">The records.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer.SerializeToString``1(``0)">
            <summary>
            Serializes to string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer.SerializeToWriter``1(``0,System.IO.TextWriter)">
            <summary>
            Serializes to writer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer.SerializeToStream``1(``0,System.IO.Stream)">
            <summary>
            Serializes to stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer.SerializeToStream(System.Object,System.IO.Stream)">
            <summary>
            Serializes to stream.
            </summary>
            <param name="obj">The object.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer.DeserializeFromStream``1(System.IO.Stream)">
            <summary>
            Deserializes from stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream">The stream.</param>
            <returns>T.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer.DeserializeFromStream(System.Type,System.IO.Stream)">
            <summary>
            Deserializes from stream.
            </summary>
            <param name="type">The type.</param>
            <param name="stream">The stream.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer.WriteLateBoundObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the late bound object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ServiceStack.Text.CsvSerializer`1">
            <summary>
            Class CsvSerializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.CsvSerializer`1.IgnoreResponseStatus">
            <summary>
            The ignore response status
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvSerializer`1.CacheFn">
            <summary>
            The cache function
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer`1.WriteFn">
            <summary>
            Writes the function.
            </summary>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="F:ServiceStack.Text.CsvSerializer`1.valueGetter">
            <summary>
            The value getter
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvSerializer`1.writeElementFn">
            <summary>
            The write element function
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer`1.GetWriteFn">
            <summary>
            Gets the write function.
            </summary>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer`1.CreateWriteFn(System.Type)">
            <summary>
            Creates the write function.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer`1.CreateWriteRowFn(System.Type)">
            <summary>
            Creates the write row function.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer`1.CreateCsvWriterFn(System.Type,System.String)">
            <summary>
            Creates the CSV writer function.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="methodName">Name of the method.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer`1.WriteEnumerableType(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the type of the enumerable.
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer`1.WriteSelf(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the self.
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer`1.WriteEnumerableProperty(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the enumerable property.
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer`1.WriteNonEnumerableType(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the type of the non enumerable.
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.CsvSerializer`1"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvSerializer`1.WriteObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ServiceStack.Text.CsvStreamExtensions">
            <summary>
            Class CsvStreamExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvStreamExtensions.WriteCsv``1(System.IO.Stream,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the CSV.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="outputStream">The output stream.</param>
            <param name="records">The records.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvStreamExtensions.WriteCsv``1(System.IO.TextWriter,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the CSV.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="writer">The writer.</param>
            <param name="records">The records.</param>
        </member>
        <member name="T:ServiceStack.Text.CsvDictionaryWriter">
            <summary>
            Class CsvDictionaryWriter.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvDictionaryWriter.WriteRow(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the row.
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvDictionaryWriter.WriteObjectRow(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Writes the object row.
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvDictionaryWriter.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="records">The records.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvDictionaryWriter.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="records">The records.</param>
        </member>
        <member name="T:ServiceStack.Text.CsvWriter">
            <summary>
            Class CsvWriter.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter.HasAnyEscapeChars(System.String)">
            <summary>
            Determines whether [has any escape chars] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [has any escape chars] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter.WriteItemSeperatorIfRanOnce(System.IO.TextWriter,System.Boolean@)">
            <summary>
            Writes the item seperator if ran once.
            </summary>
            <param name="writer">The writer.</param>
            <param name="ranOnce">if set to <c>true</c> [ran once].</param>
        </member>
        <member name="T:ServiceStack.Text.CsvWriter`1">
            <summary>
            Class CsvWriter.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.CsvWriter`1.DelimiterChar">
            <summary>
            The delimiter character
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvWriter`1.PropertyGetters">
            <summary>
            The property getters
            </summary>
        </member>
        <member name="F:ServiceStack.Text.CsvWriter`1.OptimizedWriter">
            <summary>
            The optimized writer
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.CsvWriter`1"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter`1.ConfigureCustomHeaders(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Configures the custom headers.
            </summary>
            <param name="customHeadersMap">The custom headers map.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter`1.GetSingleRow(System.Collections.Generic.IEnumerable{`0},System.Type)">
            <summary>
            Gets the single row.
            </summary>
            <param name="records">The records.</param>
            <param name="recordType">Type of the record.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter`1.GetRows(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the rows.
            </summary>
            <param name="records">The records.</param>
            <returns>List&lt;List&lt;System.String&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter`1.WriteObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="records">The records.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter`1.WriteObjectRow(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the object row.
            </summary>
            <param name="writer">The writer.</param>
            <param name="record">The record.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter`1.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="records">The records.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter`1.WriteRow(System.IO.TextWriter,`0)">
            <summary>
            Writes the row.
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter`1.WriteRow(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the row.
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:ServiceStack.Text.CsvWriter`1.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Collections.Generic.List{System.String}})">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rows">The rows.</param>
        </member>
        <member name="P:ServiceStack.Text.CsvWriter`1.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="T:ServiceStack.Text.DateTimeExtensions">
            <summary>
            A fast, standards-based, serialization-issue free DateTime serailizer.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.DateTimeExtensions.UnixEpoch">
            <summary>
            The unix epoch
            </summary>
        </member>
        <member name="F:ServiceStack.Text.DateTimeExtensions.UnixEpochDateTimeUtc">
            <summary>
            The unix epoch date time UTC
            </summary>
        </member>
        <member name="F:ServiceStack.Text.DateTimeExtensions.UnixEpochDateTimeUnspecified">
            <summary>
            The unix epoch date time unspecified
            </summary>
        </member>
        <member name="F:ServiceStack.Text.DateTimeExtensions.MinDateTimeUtc">
            <summary>
            The minimum date time UTC
            </summary>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.ToUnixTime(System.DateTime)">
            <summary>
            To the unix time.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.FromUnixTime(System.Double)">
            <summary>
            Froms the unix time.
            </summary>
            <param name="unixTime">The unix time.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.ToUnixTimeMsAlt(System.DateTime)">
            <summary>
            To the unix time ms alt.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="F:ServiceStack.Text.DateTimeExtensions.LocalTimeZone">
            <summary>
            The local time zone
            </summary>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.ToUnixTimeMs(System.DateTime)">
            <summary>
            To the unix time ms.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.ToUnixTimeMs(System.Int64)">
            <summary>
            To the unix time ms.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.FromUnixTimeMs(System.Double)">
            <summary>
            Froms the unix time ms.
            </summary>
            <param name="msSince1970">The ms since1970.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.FromUnixTimeMs(System.Int64)">
            <summary>
            Froms the unix time ms.
            </summary>
            <param name="msSince1970">The ms since1970.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.FromUnixTimeMs(System.Int64,System.TimeSpan)">
            <summary>
            Froms the unix time ms.
            </summary>
            <param name="msSince1970">The ms since1970.</param>
            <param name="offset">The offset.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.FromUnixTimeMs(System.Double,System.TimeSpan)">
            <summary>
            Froms the unix time ms.
            </summary>
            <param name="msSince1970">The ms since1970.</param>
            <param name="offset">The offset.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.FromUnixTimeMs(System.String)">
            <summary>
            Froms the unix time ms.
            </summary>
            <param name="msSince1970">The ms since1970.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.FromUnixTimeMs(System.String,System.TimeSpan)">
            <summary>
            Froms the unix time ms.
            </summary>
            <param name="msSince1970">The ms since1970.</param>
            <param name="offset">The offset.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.RoundToMs(System.DateTime)">
            <summary>
            Rounds to ms.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.RoundToSecond(System.DateTime)">
            <summary>
            Rounds to second.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.ToShortestXsdDateTimeString(System.DateTime)">
            <summary>
            To the shortest XSD date time string.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.FromShortestXsdDateTimeString(System.String)">
            <summary>
            Froms the shortest XSD date time string.
            </summary>
            <param name="xsdDateTime">The XSD date time.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.IsEqualToTheSecond(System.DateTime,System.DateTime)">
            <summary>
            Determines whether [is equal to the second] [the specified other date time].
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="otherDateTime">The other date time.</param>
            <returns><c>true</c> if [is equal to the second] [the specified other date time]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.ToTimeOffsetString(System.TimeSpan,System.String)">
            <summary>
            To the time offset string.
            </summary>
            <param name="offset">The offset.</param>
            <param name="seperator">The seperator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.FromTimeOffsetString(System.String)">
            <summary>
            Froms the time offset string.
            </summary>
            <param name="offsetString">The offset string.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.ToStableUniversalTime(System.DateTime)">
            <summary>
            To the stable universal time.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.FmtSortableDate(System.DateTime)">
            <summary>
            FMTs the sortable date.
            </summary>
            <param name="from">From.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.FmtSortableDateTime(System.DateTime)">
            <summary>
            FMTs the sortable date time.
            </summary>
            <param name="from">From.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.LastMonday(System.DateTime)">
            <summary>
            Lasts the monday.
            </summary>
            <param name="from">From.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.StartOfLastMonth(System.DateTime)">
            <summary>
            Starts the of last month.
            </summary>
            <param name="from">From.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.Text.DateTimeExtensions.EndOfLastMonth(System.DateTime)">
            <summary>
            Ends the of last month.
            </summary>
            <param name="from">From.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="T:ServiceStack.Text.Env">
            <summary>
            Class Env.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Env.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.Env"/> class.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Env.ServiceStackVersion">
            <summary>
            The service stack version
            </summary>
        </member>
        <member name="P:ServiceStack.Text.Env.IsUnix">
            <summary>
            Gets or sets a value indicating whether this instance is unix.
            </summary>
            <value><c>true</c> if this instance is unix; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.Env.IsMono">
            <summary>
            Gets or sets a value indicating whether this instance is mono.
            </summary>
            <value><c>true</c> if this instance is mono; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.Env.IsMonoTouch">
            <summary>
            Gets or sets a value indicating whether this instance is mono touch.
            </summary>
            <value><c>true</c> if this instance is mono touch; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.Env.IsWinRT">
            <summary>
            Gets or sets a value indicating whether this instance is win rt.
            </summary>
            <value><c>true</c> if this instance is win rt; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.Env.SupportsExpressions">
            <summary>
            Gets or sets a value indicating whether [supports expressions].
            </summary>
            <value><c>true</c> if [supports expressions]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.Env.SupportsEmit">
            <summary>
            Gets or sets a value indicating whether [supports emit].
            </summary>
            <value><c>true</c> if [supports emit]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.Env.ServerUserAgent">
            <summary>
            Gets or sets the server user agent.
            </summary>
            <value>The server user agent.</value>
        </member>
        <member name="T:ServiceStack.Text.ITracer">
            <summary>
            Interface ITracer
            </summary>
        </member>
        <member name="M:ServiceStack.Text.ITracer.WriteDebug(System.String)">
            <summary>
            Writes the debug.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ServiceStack.Text.ITracer.WriteDebug(System.String,System.Object[])">
            <summary>
            Writes the debug.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.Text.ITracer.WriteWarning(System.String)">
            <summary>
            Writes the warning.
            </summary>
            <param name="warning">The warning.</param>
        </member>
        <member name="M:ServiceStack.Text.ITracer.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes the warning.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.Text.ITracer.WriteError(System.Exception)">
            <summary>
            Writes the error.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:ServiceStack.Text.ITracer.WriteError(System.String)">
            <summary>
            Writes the error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ServiceStack.Text.ITracer.WriteError(System.String,System.Object[])">
            <summary>
            Writes the error.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:ServiceStack.Text.ITypeSerializer`1">
            <summary>
            Interface ITypeSerializer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.Text.ITypeSerializer`1.CanCreateFromString(System.Type)">
            <summary>
            Determines whether this serializer can create the specified type from a string.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if this instance [can create from string] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ServiceStack.Text.ITypeSerializer`1.DeserializeFromString(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.ITypeSerializer`1.DeserializeFromReader(System.IO.TextReader)">
            <summary>
            Deserializes from reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.ITypeSerializer`1.SerializeToString(`0)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.ITypeSerializer`1.SerializeToWriter(`0,System.IO.TextWriter)">
            <summary>
            Serializes to writer.
            </summary>
            <param name="value">The value.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:ServiceStack.Text.JsConfig">
            <summary>
            Class JsConfig.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsConfig.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.JsConfig"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsConfig.BeginScope">
            <summary>
            Begins the scope.
            </summary>
            <returns>JsConfigScope.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsConfig.With(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{ServiceStack.Text.JsonDateHandler},System.Nullable{ServiceStack.Text.JsonTimeSpanHandler},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Func{System.Type,System.String},System.Func{System.String,System.Type},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},ServiceStack.Text.EmptyCtorFactoryDelegate,System.String[])">
            <summary>
            Withes the specified convert object types into string dictionary.
            </summary>
            <param name="convertObjectTypesIntoStringDictionary">if set to <c>true</c> [convert object types into string dictionary].</param>
            <param name="tryToParsePrimitiveTypeValues">if set to <c>true</c> [try to parse primitive type values].</param>
            <param name="tryToParseNumericType">if set to <c>true</c> [try to parse numeric type].</param>
            <param name="includeNullValues">if set to <c>true</c> [include null values].</param>
            <param name="excludeTypeInfo">if set to <c>true</c> [exclude type information].</param>
            <param name="includeTypeInfo">if set to <c>true</c> [include type information].</param>
            <param name="emitCamelCaseNames">if set to <c>true</c> [emit camel case names].</param>
            <param name="emitLowercaseUnderscoreNames">if set to <c>true</c> [emit lowercase underscore names].</param>
            <param name="dateHandler">The date handler.</param>
            <param name="timeSpanHandler">The time span handler.</param>
            <param name="preferInterfaces">if set to <c>true</c> [prefer interfaces].</param>
            <param name="throwOnDeserializationError">if set to <c>true</c> [throw on deserialization error].</param>
            <param name="typeAttr">The type attribute.</param>
            <param name="typeWriter">The type writer.</param>
            <param name="typeFinder">The type finder.</param>
            <param name="treatEnumAsInteger">if set to <c>true</c> [treat enum as integer].</param>
            <param name="alwaysUseUtc">if set to <c>true</c> [always use UTC].</param>
            <param name="assumeUtc">if set to <c>true</c> [assume UTC].</param>
            <param name="appendUtcOffset">if set to <c>true</c> [append UTC offset].</param>
            <param name="escapeUnicode">if set to <c>true</c> [escape unicode].</param>
            <param name="includePublicFields">if set to <c>true</c> [include public fields].</param>
            <param name="maxDepth">The maximum depth.</param>
            <param name="modelFactory">The model factory.</param>
            <param name="excludePropertyReferences">The exclude property references.</param>
            <returns>JsConfigScope.</returns>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sConvertObjectTypesIntoStringDictionary">
            <summary>
            The s convert object types into string dictionary
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sTryToParsePrimitiveTypeValues">
            <summary>
            The s try to parse primitive type values
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sTryToParseNumericType">
            <summary>
            The s try to parse numeric type
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sIncludeNullValues">
            <summary>
            The s include null values
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sTreatEnumAsInteger">
            <summary>
            The s treat enum as integer
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sExcludeTypeInfo">
            <summary>
            The s exclude type information
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sIncludeTypeInfo">
            <summary>
            The s include type information
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sTypeAttr">
            <summary>
            The s type attribute
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sJsonTypeAttrInObject">
            <summary>
            The s json type attribute in object
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.defaultJsonTypeAttrInObject">
            <summary>
            The default json type attribute in object
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sJsvTypeAttrInObject">
            <summary>
            The s JSV type attribute in object
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.defaultJsvTypeAttrInObject">
            <summary>
            The default JSV type attribute in object
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sTypeWriter">
            <summary>
            The s type writer
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sTypeFinder">
            <summary>
            The s type finder
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sDateHandler">
            <summary>
            The s date handler
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sTimeSpanHandler">
            <summary>
            Sets which format to use when serializing TimeSpans
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sEmitCamelCaseNames">
            <summary>
            <see langword="true"/> if the <see cref="T:ServiceStack.Text.Common.ITypeSerializer"/> is configured
            to take advantage of <see cref="T:System.CLSCompliantAttribute"/> specification,
            to support user-friendly serialized formats, ie emitting camelCasing for JSON
            and parsing member names and enum values in a case-insensitive manner.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sEmitLowercaseUnderscoreNames">
            <summary>
            <see langword="true"/> if the <see cref="T:ServiceStack.Text.Common.ITypeSerializer"/> is configured
            to support web-friendly serialized formats, ie emitting lowercase_underscore_casing for JSON
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.propertyConvention">
            <summary>
            Define how property names are mapped during deserialization
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sThrowOnDeserializationError">
            <summary>
            Gets or sets a value indicating if the framework should throw serialization exceptions
            or continue regardless of deserialization errors. If <see langword="true" />  the framework
            will throw; otherwise, it will parse as many fields as possible. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sAlwaysUseUtc">
            <summary>
            Gets or sets a value indicating if the framework should always convert <see cref="T:System.DateTime"/> to UTC format instead of local time.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sAssumeUtc">
            <summary>
            Gets or sets a value indicating if the framework should always assume <see cref="T:System.DateTime"/> is in UTC format if Kind is Unspecified.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sAppendUtcOffset">
            <summary>
            Gets or sets whether we should append the Utc offset when we serialize Utc dates. Defaults to no.
            Only supported for when the JsConfig.DateHandler == JsonDateHandler.TimestampOffset
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sEscapeUnicode">
            <summary>
            Gets or sets a value indicating if unicode symbols should be serialized as "\uXXXX".
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.HasSerializeFn">
            <summary>
            The has serialize function
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.TreatValueAsRefTypes">
            <summary>
            The treat value as reference types
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sPreferInterfaces">
            <summary>
            The s prefer interfaces
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsConfig.TreatAsRefType(System.Type)">
            <summary>
            Treats the type of as reference.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sIncludePublicFields">
            <summary>
            If set to true, Interface types will be prefered over concrete types when serializing.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sMaxDepth">
            <summary>
            Sets the maximum depth to avoid circular dependencies
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sModelFactory">
            <summary>
            Set this to enable your own type construction provider.
            This is helpful for integration with IoC containers where you need to call the container constructor.
            Return null if you don't know how to construct the type and the parameterless constructor will be used.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sExcludePropertyReferences">
            <summary>
            The s exclude property references
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsConfig.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsConfig.Reset(System.Type)">
            <summary>
            Resets the specified caches for type.
            </summary>
            <param name="cachesForType">Type of the caches for.</param>
        </member>
        <member name="M:ServiceStack.Text.JsConfig.InvokeReset(System.Type)">
            <summary>
            Invokes the reset.
            </summary>
            <param name="genericType">Type of the generic.</param>
        </member>
        <member name="M:ServiceStack.Text.JsConfig.InitForAot">
            <summary>
            Provide hint to MonoTouch AOT compiler to pre-compile generic classes for all your DTOs.
            Just needs to be called once in a static constructor.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsConfig.RegisterForAot">
            <summary>
            Provide hint to MonoTouch AOT compiler to pre-compile generic classes for all your DTOs.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsConfig.RegisterTypeForAot``1">
            <summary>
            Provide hint to MonoTouch AOT compiler to pre-compile generic classes for all your DTOs.
            </summary>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.ConvertObjectTypesIntoStringDictionary">
            <summary>
            Gets or sets a value indicating whether [convert object types into string dictionary].
            </summary>
            <value><c>true</c> if [convert object types into string dictionary]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.TryToParsePrimitiveTypeValues">
            <summary>
            Gets or sets a value indicating whether [try to parse primitive type values].
            </summary>
            <value><c>true</c> if [try to parse primitive type values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.TryToParseNumericType">
            <summary>
            Gets or sets a value indicating whether [try to parse numeric type].
            </summary>
            <value><c>true</c> if [try to parse numeric type]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.IncludeNullValues">
            <summary>
            Gets or sets a value indicating whether [include null values].
            </summary>
            <value><c>true</c> if [include null values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.TreatEnumAsInteger">
            <summary>
            Gets or sets a value indicating whether [treat enum as integer].
            </summary>
            <value><c>true</c> if [treat enum as integer]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.ExcludeTypeInfo">
            <summary>
            Gets or sets a value indicating whether [exclude type information].
            </summary>
            <value><c>true</c> if [exclude type information]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.IncludeTypeInfo">
            <summary>
            Gets or sets a value indicating whether [include type information].
            </summary>
            <value><c>true</c> if [include type information]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.TypeAttr">
            <summary>
            Gets or sets the type attribute.
            </summary>
            <value>The type attribute.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.JsonTypeAttrInObject">
            <summary>
            Gets or sets the json type attribute in object.
            </summary>
            <value>The json type attribute in object.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.JsvTypeAttrInObject">
            <summary>
            Gets or sets the JSV type attribute in object.
            </summary>
            <value>The JSV type attribute in object.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.TypeWriter">
            <summary>
            Gets or sets the type writer.
            </summary>
            <value>The type writer.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.TypeFinder">
            <summary>
            Gets or sets the type finder.
            </summary>
            <value>The type finder.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.DateHandler">
            <summary>
            Gets or sets the date handler.
            </summary>
            <value>The date handler.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.TimeSpanHandler">
            <summary>
            Gets or sets the time span handler.
            </summary>
            <value>The time span handler.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.EmitCamelCaseNames">
            <summary>
            Gets or sets a value indicating whether [emit camel case names].
            </summary>
            <value><c>true</c> if [emit camel case names]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.EmitLowercaseUnderscoreNames">
            <summary>
            Gets or sets a value indicating whether [emit lowercase underscore names].
            </summary>
            <value><c>true</c> if [emit lowercase underscore names]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.PropertyConvention">
            <summary>
            Gets or sets the property convention.
            </summary>
            <value>The property convention.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.ThrowOnDeserializationError">
            <summary>
            Gets or sets a value indicating whether [throw on deserialization error].
            </summary>
            <value><c>true</c> if [throw on deserialization error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.AlwaysUseUtc">
            <summary>
            Gets or sets a value indicating whether [always use UTC].
            </summary>
            <value><c>true</c> if [always use UTC]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.AssumeUtc">
            <summary>
            Gets or sets a value indicating whether [assume UTC].
            </summary>
            <value><c>true</c> if [assume UTC]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.AppendUtcOffset">
            <summary>
            Gets or sets a value indicating whether [append UTC offset].
            </summary>
            <value><c>null</c> if [append UTC offset] contains no value, <c>true</c> if [append UTC offset]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.EscapeUnicode">
            <summary>
            Gets or sets a value indicating whether [escape unicode].
            </summary>
            <value><c>true</c> if [escape unicode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.PreferInterfaces">
            <summary>
            If set to true, Interface types will be prefered over concrete types when serializing.
            </summary>
            <value><c>true</c> if [prefer interfaces]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.IncludePublicFields">
            <summary>
            Gets or sets a value indicating whether [include public fields].
            </summary>
            <value><c>true</c> if [include public fields]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.MaxDepth">
            <summary>
            Gets or sets the maximum depth.
            </summary>
            <value>The maximum depth.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.ModelFactory">
            <summary>
            Gets or sets the model factory.
            </summary>
            <value>The model factory.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.ExcludePropertyReferences">
            <summary>
            Gets or sets the exclude property references.
            </summary>
            <value>The exclude property references.</value>
        </member>
        <member name="T:ServiceStack.Text.JsConfig.AotConfig">
            <summary>
             Class contains Ahead-of-Time (AOT) explicit class declarations which is used only to workaround "-aot-only" exceptions occured on device only. 
             </summary>			
        </member>
        <member name="T:ServiceStack.Text.JsConfig`1">
            <summary>
            Class JsConfig.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.IncludeTypeInfo">
            <summary>
            Always emit type info for this type.  Takes precedence over ExcludeTypeInfo
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.ExcludeTypeInfo">
            <summary>
            Never emit type info for this type
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.EmitCamelCaseNames">
            <summary>
            <see langword="true"/> if the <see cref="T:ServiceStack.Text.Common.ITypeSerializer"/> is configured
            to take advantage of <see cref="T:System.CLSCompliantAttribute"/> specification,
            to support user-friendly serialized formats, ie emitting camelCasing for JSON
            and parsing member names and enum values in a case-insensitive manner.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.EmitLowercaseUnderscoreNames">
            <summary>
            The emit lowercase underscore names
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.serializeFn">
            <summary>
            Define custom serialization fn for BCL Structs
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.rawSerializeFn">
            <summary>
            Define custom raw serialization fn
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.onSerializingFn">
            <summary>
            Define custom serialization hook
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.DeSerializeFn">
            <summary>
            Define custom deserialization fn for BCL Structs
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.RawDeserializeFn">
            <summary>
            Define custom raw deserialization fn for objects
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.onDeserializedFn">
            <summary>
            The on deserialized function
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.ExcludePropertyNames">
            <summary>
            Exclude specific properties of this type from being serialized
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsConfig`1.WriteFn``1(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the function.
            </summary>
            <typeparam name="TSerializer"></typeparam>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.Text.JsConfig`1.ParseFn(System.String)">
            <summary>
            Parses the function.
            </summary>
            <param name="str">The string.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsConfig`1.ParseFn(ServiceStack.Text.Common.ITypeSerializer,System.String)">
            <summary>
            Parses the function.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="str">The string.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsConfig`1.ClearFnCaches">
            <summary>
            Clears the function caches.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsConfig`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="P:ServiceStack.Text.JsConfig`1.SerializeFn">
            <summary>
            Gets or sets the serialize function.
            </summary>
            <value>The serialize function.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig`1.TreatValueAsRefType">
            <summary>
            Opt-in flag to set some Value Types to be treated as a Ref Type
            </summary>
            <value><c>true</c> if [treat value as reference type]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig`1.HasSerializeFn">
            <summary>
            Whether there is a fn (raw or otherwise)
            </summary>
            <value><c>true</c> if this instance has serialize function; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig`1.RawSerializeFn">
            <summary>
            Gets or sets the raw serialize function.
            </summary>
            <value>The raw serialize function.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig`1.OnSerializingFn">
            <summary>
            Gets or sets the on serializing function.
            </summary>
            <value>The on serializing function.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig`1.HasDeserializeFn">
            <summary>
            Gets a value indicating whether this instance has deserialize function.
            </summary>
            <value><c>true</c> if this instance has deserialize function; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfig`1.OnDeserializedFn">
            <summary>
            Gets or sets the on deserialized function.
            </summary>
            <value>The on deserialized function.</value>
        </member>
        <member name="T:ServiceStack.Text.JsonPropertyConvention">
            <summary>
            Enum JsonPropertyConvention
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsonPropertyConvention.ExactMatch">
            <summary>
            The property names on target types must match property names in the JSON source
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsonPropertyConvention.Lenient">
            <summary>
            The property names on target types may not match the property names in the JSON source
            </summary>
        </member>
        <member name="T:ServiceStack.Text.JsonDateHandler">
            <summary>
            Enum JsonDateHandler
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsonDateHandler.TimestampOffset">
            <summary>
            The timestamp offset
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsonDateHandler.DCJSCompatible">
            <summary>
            The DCJS compatible
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsonDateHandler.ISO8601">
            <summary>
            The is o8601
            </summary>
            <summary>
            Enum JsonTimeSpanHandler
            </summary>
        </member>
        <member name="T:ServiceStack.Text.JsonTimeSpanHandler">
            <summary>
            Enum JsonTimeSpanHandler
            <summary>
            The duration format
            </summary>
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsonTimeSpanHandler.DurationFormat">
            <summary>
            The duration format
            </summary>
            <summary>
            <summary>
            The standard format
            </summary>
            Uses the xsd format like PT15H10M20S
            </summary>
            <summary>
            The duration format
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsonTimeSpanHandler.StandardFormat">
            <summary>
            The standard format
            </summary>
            <summary>
            Uses the standard .net ToString method of the TimeSpan class
            </summary>
            <summary>
            The standard format
            </summary>
        </member>
        <member name="T:ServiceStack.Text.JsConfigScope">
            <summary>
            Class JsConfigScope. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfigScope.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfigScope.parent">
            <summary>
            The parent
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfigScope.head">
            <summary>
            The head
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsConfigScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Text.JsConfigScope"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsConfigScope.DisposeCurrent">
            <summary>
            Disposes the current.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsConfigScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.ConvertObjectTypesIntoStringDictionary">
            <summary>
            Gets or sets a value indicating whether [convert object types into string dictionary].
            </summary>
            <value><c>null</c> if [convert object types into string dictionary] contains no value, <c>true</c> if [convert object types into string dictionary]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.TryToParsePrimitiveTypeValues">
            <summary>
            Gets or sets a value indicating whether [try to parse primitive type values].
            </summary>
            <value><c>null</c> if [try to parse primitive type values] contains no value, <c>true</c> if [try to parse primitive type values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.TryToParseNumericType">
            <summary>
            Gets or sets a value indicating whether [try to parse numeric type].
            </summary>
            <value><c>null</c> if [try to parse numeric type] contains no value, <c>true</c> if [try to parse numeric type]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.IncludeNullValues">
            <summary>
            Gets or sets a value indicating whether [include null values].
            </summary>
            <value><c>null</c> if [include null values] contains no value, <c>true</c> if [include null values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.TreatEnumAsInteger">
            <summary>
            Gets or sets a value indicating whether [treat enum as integer].
            </summary>
            <value><c>null</c> if [treat enum as integer] contains no value, <c>true</c> if [treat enum as integer]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.ExcludeTypeInfo">
            <summary>
            Gets or sets a value indicating whether [exclude type information].
            </summary>
            <value><c>null</c> if [exclude type information] contains no value, <c>true</c> if [exclude type information]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.IncludeTypeInfo">
            <summary>
            Gets or sets a value indicating whether [include type information].
            </summary>
            <value><c>null</c> if [include type information] contains no value, <c>true</c> if [include type information]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.TypeAttr">
            <summary>
            Gets or sets the type attribute.
            </summary>
            <value>The type attribute.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.JsonTypeAttrInObject">
            <summary>
            Gets or sets the json type attribute in object.
            </summary>
            <value>The json type attribute in object.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.JsvTypeAttrInObject">
            <summary>
            Gets or sets the JSV type attribute in object.
            </summary>
            <value>The JSV type attribute in object.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.TypeWriter">
            <summary>
            Gets or sets the type writer.
            </summary>
            <value>The type writer.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.TypeFinder">
            <summary>
            Gets or sets the type finder.
            </summary>
            <value>The type finder.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.DateHandler">
            <summary>
            Gets or sets the date handler.
            </summary>
            <value>The date handler.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.TimeSpanHandler">
            <summary>
            Gets or sets the time span handler.
            </summary>
            <value>The time span handler.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.EmitCamelCaseNames">
            <summary>
            Gets or sets a value indicating whether [emit camel case names].
            </summary>
            <value><c>null</c> if [emit camel case names] contains no value, <c>true</c> if [emit camel case names]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.EmitLowercaseUnderscoreNames">
            <summary>
            Gets or sets a value indicating whether [emit lowercase underscore names].
            </summary>
            <value><c>null</c> if [emit lowercase underscore names] contains no value, <c>true</c> if [emit lowercase underscore names]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.ThrowOnDeserializationError">
            <summary>
            Gets or sets a value indicating whether [throw on deserialization error].
            </summary>
            <value><c>null</c> if [throw on deserialization error] contains no value, <c>true</c> if [throw on deserialization error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.AlwaysUseUtc">
            <summary>
            Gets or sets a value indicating whether [always use UTC].
            </summary>
            <value><c>null</c> if [always use UTC] contains no value, <c>true</c> if [always use UTC]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.AssumeUtc">
            <summary>
            Gets or sets a value indicating whether [assume UTC].
            </summary>
            <value><c>null</c> if [assume UTC] contains no value, <c>true</c> if [assume UTC]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.AppendUtcOffset">
            <summary>
            Gets or sets a value indicating whether [append UTC offset].
            </summary>
            <value><c>null</c> if [append UTC offset] contains no value, <c>true</c> if [append UTC offset]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.EscapeUnicode">
            <summary>
            Gets or sets a value indicating whether [escape unicode].
            </summary>
            <value><c>null</c> if [escape unicode] contains no value, <c>true</c> if [escape unicode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.PreferInterfaces">
            <summary>
            Gets or sets a value indicating whether [prefer interfaces].
            </summary>
            <value><c>null</c> if [prefer interfaces] contains no value, <c>true</c> if [prefer interfaces]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.IncludePublicFields">
            <summary>
            Gets or sets a value indicating whether [include public fields].
            </summary>
            <value><c>null</c> if [include public fields] contains no value, <c>true</c> if [include public fields]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.MaxDepth">
            <summary>
            Gets or sets the maximum depth.
            </summary>
            <value>The maximum depth.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.ModelFactory">
            <summary>
            Gets or sets the model factory.
            </summary>
            <value>The model factory.</value>
        </member>
        <member name="P:ServiceStack.Text.JsConfigScope.ExcludePropertyReferences">
            <summary>
            Gets or sets the exclude property references.
            </summary>
            <value>The exclude property references.</value>
        </member>
        <member name="T:ServiceStack.Text.JsonExtensions">
            <summary>
            Class JsonExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsonExtensions.JsonTo``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Jsons to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="map">The map.</param>
            <param name="key">The key.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonExtensions.Get``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get JSON string value converted to T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="map">The map.</param>
            <param name="key">The key.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonExtensions.Get(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get JSON string value
            </summary>
            <param name="map">The map.</param>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonExtensions.ArrayObjects(System.String)">
            <summary>
            Arrays the objects.
            </summary>
            <param name="json">The json.</param>
            <returns>JsonArrayObjects.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonExtensions.ConvertAll``1(ServiceStack.Text.JsonArrayObjects,System.Func{ServiceStack.Text.JsonObject,``0})">
            <summary>
            Converts all.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonArrayObjects">The json array objects.</param>
            <param name="converter">The converter.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonExtensions.ConvertTo``1(ServiceStack.Text.JsonObject,System.Func{ServiceStack.Text.JsonObject,``0})">
            <summary>
            Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonObject">The json object.</param>
            <param name="converFn">The conver function.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonExtensions.ToDictionary(ServiceStack.Text.JsonObject)">
            <summary>
            To the dictionary.
            </summary>
            <param name="jsonObject">The json object.</param>
            <returns>Dictionary&lt;System.String, System.String&gt;.</returns>
        </member>
        <member name="T:ServiceStack.Text.JsonObject">
            <summary>
            Class JsonObject.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsonObject.Parse(System.String)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <returns>JsonObject.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonObject.ParseArray(System.String)">
            <summary>
            Parses the array.
            </summary>
            <param name="json">The json.</param>
            <returns>JsonArrayObjects.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonObject.ArrayObjects(System.String)">
            <summary>
            Arrays the objects.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>JsonArrayObjects.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonObject.Object(System.String)">
            <summary>
            Objects the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>JsonObject.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonObject.GetUnescaped(System.String)">
            <summary>
            Get unescaped string value
            </summary>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonObject.Child(System.String)">
            <summary>
            Get unescaped string value
            </summary>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="F:ServiceStack.Text.JsonObject.NumberRegEx">
            <summary>
            The number reg ex
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsonObject.WriteValue(System.IO.TextWriter,System.Object)">
            <summary>
            Write JSON Array, Object, bool or number values as raw string
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:ServiceStack.Text.JsonObject.Item(System.String)">
            <summary>
            Get JSON string value
            </summary>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.Text.JsonArrayObjects">
            <summary>
            Class JsonArrayObjects.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsonArrayObjects.Parse(System.String)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <returns>JsonArrayObjects.</returns>
        </member>
        <member name="T:ServiceStack.Text.JsonValue">
            <summary>
            Struct JsonValue
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsonValue.json">
            <summary>
            The json
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsonValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Text.JsonValue"/> struct.
            </summary>
            <param name="json">The json.</param>
        </member>
        <member name="M:ServiceStack.Text.JsonValue.As``1">
            <summary>
            Ases this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:ServiceStack.Text.JsonSerializer">
            <summary>
            Creates an instance of a Type from a string value
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsonSerializer.UTF8EncodingWithoutBom">
            <summary>
            The utf8 encoding without bom
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer.DeserializeFromString``1(System.String)">
            <summary>
            Deserializes from string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer.DeserializeFromReader``1(System.IO.TextReader)">
            <summary>
            Deserializes from reader.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer.DeserializeFromString(System.String,System.Type)">
            <summary>
            Deserializes from string.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer.DeserializeFromReader(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes from reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer.SerializeToString``1(``0)">
            <summary>
            Serializes to string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer.SerializeToString(System.Object,System.Type)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer.SerializeToWriter``1(``0,System.IO.TextWriter)">
            <summary>
            Serializes to writer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer.SerializeToWriter(System.Object,System.Type,System.IO.TextWriter)">
            <summary>
            Serializes to writer.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer.SerializeToStream``1(``0,System.IO.Stream)">
            <summary>
            Serializes to stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer.SerializeToStream(System.Object,System.Type,System.IO.Stream)">
            <summary>
            Serializes to stream.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:ServiceStack.Text.JsonSerializer`1">
            <summary>
            Class JsonSerializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer`1.CanCreateFromString(System.Type)">
            <summary>
            Determines whether this serializer can create the specified type from a string.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if this instance [can create from string] the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer`1.DeserializeFromString(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer`1.DeserializeFromReader(System.IO.TextReader)">
            <summary>
            Deserializes from reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer`1.SerializeToString(`0)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer`1.SerializeToWriter(`0,System.IO.TextWriter)">
            <summary>
            Serializes to writer.
            </summary>
            <param name="value">The value.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:ServiceStack.Text.Json.JsonReader">
            <summary>
            Class JsonReader.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Json.JsonReader.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Json.JsonReader.ParseFnCache">
            <summary>
            The parse function cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonReader.GetParseFn(System.Type)">
            <summary>
            Gets the parse function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="T:ServiceStack.Text.Json.JsonReader`1">
            <summary>
            Class JsonReader.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.Json.JsonReader`1.ReadFn">
            <summary>
            The read function
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonReader`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.Json.JsonReader`1"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonReader`1.GetParseFn">
            <summary>
            Gets the parse function.
            </summary>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonReader`1.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Can not deserialize interface type: 
            						+ typeof(T).Name</exception>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonTypeSerializer.WriteRawString(System.IO.TextWriter,System.String)">
            <summary>
            Shortcut escape when we're sure value doesn't contain any escaped chars
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonTypeSerializer.ConvertFromUtf32(System.Int32)">
            <summary>
            Given a character as utf32, returns the equivalent string provided that the character
            is legal json.
            </summary>
            <param name="utf32"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Text.Json.JsonUtils">
            <summary>
            Class JsonUtils.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Json.JsonUtils.EscapeChar">
            <summary>
            The escape character
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Json.JsonUtils.QuoteChar">
            <summary>
            The quote character
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Json.JsonUtils.Null">
            <summary>
            The null
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Json.JsonUtils.True">
            <summary>
            The true
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Json.JsonUtils.False">
            <summary>
            The false
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Json.JsonUtils.LengthFromLargestChar">
            <summary>
            The length from largest character
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Json.JsonUtils.EscapeChars">
            <summary>
            The escape chars
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Json.JsonUtils.EscapeCharFlags">
            <summary>
            The escape character flags
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonUtils.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.Json.JsonUtils"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonUtils.WriteString(System.IO.TextWriter,System.String)">
            <summary>
            Writes the string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonUtils.HasAnyEscapeChars(System.String)">
            <summary>
            micro optimizations: using flags instead of value.IndexOfAny(EscapeChars)
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [has any escape chars] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonUtils.IntToHex(System.Int32,System.Char[])">
            <summary>
            Ints to hexadecimal.
            </summary>
            <param name="intValue">The int value.</param>
            <param name="hex">The hexadecimal.</param>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonUtils.IsJsObject(System.String)">
            <summary>
            Determines whether [is js object] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is js object] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonUtils.IsJsArray(System.String)">
            <summary>
            Determines whether [is js array] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is js array] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ServiceStack.Text.Json.JsonWriter`1">
            <summary>
            Implement the serializer using a more static approach
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Text.JsvFormatter">
            <summary>
            Class JsvFormatter.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsvFormatter.Format(System.String)">
            <summary>
            Formats the specified serialized text.
            </summary>
            <param name="serializedText">The serialized text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.JsvFormatter.AppendTabLine(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends the tab line.
            </summary>
            <param name="sb">The sb.</param>
            <param name="tabCount">The tab count.</param>
        </member>
        <member name="T:ServiceStack.Text.Jsv.JsvDeserializeType">
            <summary>
            Class JsvDeserializeType.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Jsv.JsvDeserializeType.GetSetPropertyMethod(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Gets the set property method.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyInfo">The property information.</param>
            <returns>SetPropertyDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.Jsv.JsvDeserializeType.GetSetFieldMethod(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Gets the set field method.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldInfo">The field information.</param>
            <returns>SetPropertyDelegate.</returns>
        </member>
        <member name="T:ServiceStack.Text.Jsv.JsvReader">
            <summary>
            Class JsvReader.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Jsv.JsvReader.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Jsv.JsvReader.ParseFnCache">
            <summary>
            The parse function cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Jsv.JsvReader.GetParseFn(System.Type)">
            <summary>
            Gets the parse function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="T:ServiceStack.Text.Jsv.JsvReader`1">
            <summary>
            Class JsvReader.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.Jsv.JsvReader`1.ReadFn">
            <summary>
            The read function
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Jsv.JsvReader`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.Jsv.JsvReader`1"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Jsv.JsvReader`1.GetParseFn">
            <summary>
            Gets the parse function.
            </summary>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.Jsv.JsvReader`1.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Can not deserialize interface type: 
            						+ typeof(T).Name</exception>
        </member>
        <member name="T:ServiceStack.Text.Jsv.JsvSerializer`1">
            <summary>
            Class JsvSerializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.Jsv.JsvSerializer`1.DeserializerCache">
            <summary>
            The deserializer cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Jsv.JsvSerializer`1.DeserializeFromString(System.String,System.Type)">
            <summary>
            Deserializes from string.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.Jsv.JsvSerializer`1.DeserializeFromString(System.String)">
            <summary>
            Deserializes from string.
            </summary>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.Jsv.JsvSerializer`1.SerializeToWriter(`0,System.IO.TextWriter)">
            <summary>
            Serializes to writer.
            </summary>
            <param name="value">The value.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ServiceStack.Text.Jsv.JsvSerializer`1.SerializeToString(`0)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.Text.Jsv.JsvWriter`1">
            <summary>
            Implement the serializer using a more static approach
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Text.ListExtensions">
            <summary>
            Class ListExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.ListExtensions.Join``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Joins the specified values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.ListExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Joins the specified seperator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="seperator">The seperator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.ListExtensions.IsNullOrEmpty``1(System.Collections.Generic.List{``0})">
            <summary>
            Determines whether [is null or empty] [the specified list].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns><c>true</c> if [is null or empty] [the specified list]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.ListExtensions.SafeWhere``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Safes the where.
            </summary>
            <typeparam name="TFrom">The type of the t from.</typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
            <returns>IEnumerable&lt;TFrom&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.ListExtensions.NullableCount``1(System.Collections.Generic.List{``0})">
            <summary>
            Nullables the count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.Text.ListExtensions.AddIfNotExists``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Adds if not exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:ServiceStack.Text.MapExtensions">
            <summary>
            Class MapExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.MapExtensions.Join``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Joins the specified values.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="values">The values.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.MapExtensions.Join``2(System.Collections.Generic.Dictionary{``0,``1},System.String,System.String)">
            <summary>
            Joins the specified item seperator.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="values">The values.</param>
            <param name="itemSeperator">The item seperator.</param>
            <param name="keySeperator">The key seperator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.Text.Marc.Link`2">
            <summary>
            Pretty Thread-Safe cache class from:
            http://code.google.com/p/dapper-dot-net/source/browse/Dapper/SqlMapper.cs
            
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="T:ServiceStack.Text.QueryStringSerializer">
            <summary>
            Class QueryStringSerializer.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.QueryStringSerializer.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:ServiceStack.Text.QueryStringSerializer.WriteFnCache">
            <summary>
            The write function cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.QueryStringSerializer.GetWriteFn(System.Type)">
            <summary>
            Gets the write function.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.QueryStringSerializer.WriteLateBoundObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the late bound object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.Text.QueryStringSerializer.GetValueTypeToStringMethod(System.Type)">
            <summary>
            Gets the value type to string method.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.QueryStringSerializer.SerializeToString``1(``0)">
            <summary>
            Serializes to string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.Text.QueryStringWriter`1">
            <summary>
            Implement the serializer using a more static approach
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.QueryStringWriter`1.CacheFn">
            <summary>
            The cache function
            </summary>
        </member>
        <member name="M:ServiceStack.Text.QueryStringWriter`1.WriteFn">
            <summary>
            Writes the function.
            </summary>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.QueryStringWriter`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.QueryStringWriter`1"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.QueryStringWriter`1.WriteObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:ServiceStack.Text.QueryStringWriter`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.Text.QueryStringWriter`1.WriteIDictionary(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the i dictionary.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oMap">The o map.</param>
        </member>
        <member name="T:ServiceStack.Text.ReflectionExtensions">
            <summary>
            ReflectionExtensions
            </summary>
        </member>
        <member name="F:ServiceStack.Text.ReflectionExtensions.DataContract">
            <summary>
            The data contract
            </summary>
        </member>
        <member name="F:ServiceStack.Text.ReflectionExtensions.DataMember">
            <summary>
            The data member
            </summary>
        </member>
        <member name="F:ServiceStack.Text.ReflectionExtensions.IgnoreDataMember">
            <summary>
            The ignore data member
            </summary>
        </member>
        <member name="F:ServiceStack.Text.ReflectionExtensions.DefaultValueTypes">
            <summary>
            The default value types
            </summary>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.IsInstanceOf(System.Type,System.Type)">
            <summary>
            Determines whether [is instance of] [the specified this or base type].
            </summary>
            <param name="type">The type.</param>
            <param name="thisOrBaseType">Type of the this or base.</param>
            <returns><c>true</c> if [is instance of] [the specified this or base type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.HasGenericType(System.Type)">
            <summary>
            Determines whether [has generic type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [has generic type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetGenericType(System.Type)">
            <summary>
            Gets the type of the generic.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetTypeWithGenericTypeDefinitionOfAny(System.Type,System.Type[])">
            <summary>
            Gets the type with generic type definition of any.
            </summary>
            <param name="type">The type.</param>
            <param name="genericTypeDefinitions">The generic type definitions.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.IsOrHasGenericInterfaceTypeOf(System.Type,System.Type)">
            <summary>
            Determines whether [is or has generic interface type of] [the specified generic type definition].
            </summary>
            <param name="type">The type.</param>
            <param name="genericTypeDefinition">The generic type definition.</param>
            <returns><c>true</c> if [is or has generic interface type of] [the specified generic type definition]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetTypeWithGenericTypeDefinitionOf(System.Type,System.Type)">
            <summary>
            Gets the type with generic type definition of.
            </summary>
            <param name="type">The type.</param>
            <param name="genericTypeDefinition">The generic type definition.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetTypeWithInterfaceOf(System.Type,System.Type)">
            <summary>
            Gets the type with interface of.
            </summary>
            <param name="type">The type.</param>
            <param name="interfaceType">Type of the interface.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.HasInterface(System.Type,System.Type)">
            <summary>
            Determines whether the specified interface type has interface.
            </summary>
            <param name="type">The type.</param>
            <param name="interfaceType">Type of the interface.</param>
            <returns><c>true</c> if the specified interface type has interface; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.AllHaveInterfacesOfType(System.Type,System.Type[])">
            <summary>
            Alls the type of the have interfaces of.
            </summary>
            <param name="assignableFromType">Type of the assignable from.</param>
            <param name="types">The types.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.IsNumericType(System.Type)">
            <summary>
            Determines whether [is numeric type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is numeric type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.IsIntegerType(System.Type)">
            <summary>
            Determines whether [is integer type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is integer type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.IsRealNumberType(System.Type)">
            <summary>
            Determines whether [is real number type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is real number type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetTypeWithGenericInterfaceOf(System.Type,System.Type)">
            <summary>
            Gets the type with generic interface of.
            </summary>
            <param name="type">The type.</param>
            <param name="genericInterfaceType">Type of the generic interface.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.HasAnyTypeDefinitionsOf(System.Type,System.Type[])">
            <summary>
            Determines whether [has any type definitions of] [the specified these generic types].
            </summary>
            <param name="genericType">Type of the generic.</param>
            <param name="theseGenericTypes">The these generic types.</param>
            <returns><c>true</c> if [has any type definitions of] [the specified these generic types]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetGenericArgumentsIfBothHaveSameGenericDefinitionTypeAndArguments(System.Type,System.Type,System.Type)">
            <summary>
            Gets the generic arguments if both have same generic definition type and arguments.
            </summary>
            <param name="assignableFromType">Type of the assignable from.</param>
            <param name="typeA">The type a.</param>
            <param name="typeB">The type b.</param>
            <returns>Type[].</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetGenericArgumentsIfBothHaveConvertibleGenericDefinitionTypeAndArguments(System.Type,System.Type,System.Type)">
            <summary>
            Gets the generic arguments if both have convertible generic definition type and arguments.
            </summary>
            <param name="assignableFromType">Type of the assignable from.</param>
            <param name="typeA">The type a.</param>
            <param name="typeB">The type b.</param>
            <returns>TypePair.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.AreAllStringOrValueTypes(System.Type[])">
            <summary>
            Ares all string or value types.
            </summary>
            <param name="types">The types.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:ServiceStack.Text.ReflectionExtensions.ConstructorMethods">
            <summary>
            The constructor methods
            </summary>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetConstructorMethod(System.Type)">
            <summary>
            Gets the constructor method.
            </summary>
            <param name="type">The type.</param>
            <returns>EmptyCtorDelegate.</returns>
        </member>
        <member name="F:ServiceStack.Text.ReflectionExtensions.TypeNamesMap">
            <summary>
            The type names map
            </summary>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetConstructorMethod(System.String)">
            <summary>
            Gets the constructor method.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>EmptyCtorDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetConstructorMethodToCache(System.Type)">
            <summary>
            Gets the constructor method to cache.
            </summary>
            <param name="type">The type.</param>
            <returns>EmptyCtorDelegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.CreateInstance``1">
            <summary>
            Creates the instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.CreateInstance(System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.CreateInstance(System.String)">
            <summary>
            Creates the instance.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetPublicProperties(System.Type)">
            <summary>
            Gets the public properties.
            </summary>
            <param name="type">The type.</param>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetSerializableProperties(System.Type)">
            <summary>
            Gets the serializable properties.
            </summary>
            <param name="type">The type.</param>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetSerializableFields(System.Type)">
            <summary>
            Gets the serializable fields.
            </summary>
            <param name="type">The type.</param>
            <returns>FieldInfo[].</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.HasAttr``1(System.Type)">
            <summary>
            Determines whether the specified type has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type has attribute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetDataContract(System.Type)">
            <summary>
            Gets the data contract.
            </summary>
            <param name="type">The type.</param>
            <returns>DataContractAttribute.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetDataMember(System.Reflection.PropertyInfo)">
            <summary>
            Gets the data member.
            </summary>
            <param name="pi">The pi.</param>
            <returns>DataMemberAttribute.</returns>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.GetDataMember(System.Reflection.FieldInfo)">
            <summary>
            Gets the data member.
            </summary>
            <param name="pi">The pi.</param>
            <returns>DataMemberAttribute.</returns>
        </member>
        <member name="T:ServiceStack.Text.ReflectionExtensions.TypeMeta`1">
            <summary>
            Class TypeMeta.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.ReflectionExtensions.TypeMeta`1.EmptyCtorFn">
            <summary>
            The empty ctor function
            </summary>
        </member>
        <member name="M:ServiceStack.Text.ReflectionExtensions.TypeMeta`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.ReflectionExtensions.TypeMeta`1"/> class.
            </summary>
        </member>
        <member name="T:ServiceStack.Text.PlatformExtensions">
            <summary>
            Class PlatformExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.IsInterface(System.Type)">
            <summary>
            Determines whether the specified type is interface.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is interface; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.IsArray(System.Type)">
            <summary>
            Determines whether the specified type is array.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.IsValueType(System.Type)">
            <summary>
            Determines whether [is value type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is value type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.IsGeneric(System.Type)">
            <summary>
            Determines whether the specified type is generic.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is generic; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.BaseType(System.Type)">
            <summary>
            Bases the type.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.ReflectedType(System.Reflection.PropertyInfo)">
            <summary>
            Reflecteds the type.
            </summary>
            <param name="pi">The pi.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.ReflectedType(System.Reflection.FieldInfo)">
            <summary>
            Reflecteds the type.
            </summary>
            <param name="fi">The fi.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GenericTypeDefinition(System.Type)">
            <summary>
            Generics the type definition.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetTypeInterfaces(System.Type)">
            <summary>
            Gets the type interfaces.
            </summary>
            <param name="type">The type.</param>
            <returns>Type[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetTypeGenericArguments(System.Type)">
            <summary>
            Gets the type generic arguments.
            </summary>
            <param name="type">The type.</param>
            <returns>Type[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetEmptyConstructor(System.Type)">
            <summary>
            Gets the empty constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>ConstructorInfo.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetTypesPublicProperties(System.Type)">
            <summary>
            Gets the types public properties.
            </summary>
            <param name="subType">Type of the sub.</param>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.Properties(System.Type)">
            <summary>
            Propertieses the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetPublicFields(System.Type)">
            <summary>
            Gets the public fields.
            </summary>
            <param name="type">The type.</param>
            <returns>FieldInfo[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetPublicMembers(System.Type)">
            <summary>
            Gets the public members.
            </summary>
            <param name="type">The type.</param>
            <returns>MemberInfo[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetAllPublicMembers(System.Type)">
            <summary>
            Gets all public members.
            </summary>
            <param name="type">The type.</param>
            <returns>MemberInfo[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.HasAttribute``1(System.Type,System.Boolean)">
            <summary>
            Determines whether the specified inherit has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns><c>true</c> if the specified inherit has attribute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.AttributesOfType``1(System.Type,System.Boolean)">
            <summary>
            Attributeses the type of the of.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="inherit">The inherit.</param>
            <returns>System.Collections.Generic.IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.IsDto(System.Type)">
            <summary>
            Determines whether the specified type is dto.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.PropertyGetMethod(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Properties the get method.
            </summary>
            <param name="pi">The pi.</param>
            <param name="nonPublic">The non public.</param>
            <returns>System.Reflection.MethodInfo.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.Interfaces(System.Type)">
            <summary>
            Interfaceses the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Type[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.AllProperties(System.Type)">
            <summary>
            Alls the properties.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Reflection.PropertyInfo[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.CustomAttributes(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Customs the attributes.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="inherit">The inherit.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.CustomAttributes(System.Reflection.PropertyInfo,System.Type,System.Boolean)">
            <summary>
            Customs the attributes.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="attrType">Type of the attribute.</param>
            <param name="inherit">The inherit.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.CustomAttributes(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Customs the attributes.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <param name="inherit">The inherit.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.CustomAttributes(System.Reflection.FieldInfo,System.Type,System.Boolean)">
            <summary>
            Customs the attributes.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <param name="attrType">Type of the attribute.</param>
            <param name="inherit">The inherit.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.CustomAttributes(System.Type,System.Boolean)">
            <summary>
            Customs the attributes.
            </summary>
            <param name="type">The type.</param>
            <param name="inherit">The inherit.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.CustomAttributes(System.Type,System.Type,System.Boolean)">
            <summary>
            Customs the attributes.
            </summary>
            <param name="type">The type.</param>
            <param name="attrType">Type of the attribute.</param>
            <param name="inherit">The inherit.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.FirstAttribute``1(System.Type,System.Boolean)">
            <summary>
            Firsts the attribute.
            </summary>
            <typeparam name="TAttr">The type of the t attribute.</typeparam>
            <param name="type">The type.</param>
            <param name="inherit">The inherit.</param>
            <returns>TAttr.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.FirstAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Firsts the attribute.
            </summary>
            <typeparam name="TAttribute">The type of the t attribute.</typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>TAttribute.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.FirstAttribute``1(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Firsts the attribute.
            </summary>
            <typeparam name="TAttribute">The type of the t attribute.</typeparam>
            <param name="propertyInfo">The property information.</param>
            <param name="inherit">The inherit.</param>
            <returns>TAttribute.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.FirstGenericTypeDefinition(System.Type)">
            <summary>
            Firsts the generic type definition.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Type.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.IsDynamic(System.Reflection.Assembly)">
            <summary>
            Determines whether the specified assembly is dynamic.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetPublicStaticMethod(System.Type,System.String,System.Type[])">
            <summary>
            Gets the public static method.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <param name="types">The types.</param>
            <returns>System.Reflection.MethodInfo.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetMethodInfo(System.Type,System.String,System.Type[])">
            <summary>
            Gets the method information.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <param name="types">The types.</param>
            <returns>System.Reflection.MethodInfo.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.InvokeMethod(System.Delegate,System.Object,System.Object[])">
            <summary>
            Invokes the method.
            </summary>
            <param name="fn">The function.</param>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetPublicStaticField(System.Type,System.String)">
            <summary>
            Gets the public static field.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>System.Reflection.FieldInfo.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.MakeDelegate(System.Reflection.MethodInfo,System.Type,System.Boolean)">
            <summary>
            Makes the delegate.
            </summary>
            <param name="mi">The mi.</param>
            <param name="delegateType">Type of the delegate.</param>
            <param name="throwOnBindFailure">The throw on bind failure.</param>
            <returns>System.Delegate.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GenericTypeArguments(System.Type)">
            <summary>
            Generics the type arguments.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Type[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.DeclaredConstructors(System.Type)">
            <summary>
            Declareds the constructors.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Reflection.ConstructorInfo[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.AssignableFrom(System.Type,System.Type)">
            <summary>
            Assignables from.
            </summary>
            <param name="type">The type.</param>
            <param name="fromType">From type.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.IsStandardClass(System.Type)">
            <summary>
            Determines whether [is standard class] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.IsAbstract(System.Type)">
            <summary>
            Determines whether the specified type is abstract.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Gets the property information.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>System.Reflection.PropertyInfo.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetFieldInfo(System.Type,System.String)">
            <summary>
            Gets the field information.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>System.Reflection.FieldInfo.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetWritableFields(System.Type)">
            <summary>
            Gets the writable fields.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Reflection.FieldInfo[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.SetMethod(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Sets the method.
            </summary>
            <param name="pi">The pi.</param>
            <param name="nonPublic">The non public.</param>
            <returns>System.Reflection.MethodInfo.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetMethodInfo(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the method information.
            </summary>
            <param name="pi">The pi.</param>
            <param name="nonPublic">The non public.</param>
            <returns>System.Reflection.MethodInfo.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.InstanceOfType(System.Type,System.Object)">
            <summary>
            Instances the type of the of.
            </summary>
            <param name="type">The type.</param>
            <param name="instance">The instance.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.IsClass(System.Type)">
            <summary>
            Determines whether the specified type is class.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.IsEnum(System.Type)">
            <summary>
            Determines whether the specified type is enum.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.IsEnumFlags(System.Type)">
            <summary>
            Determines whether [is enum flags] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.IsUnderlyingEnum(System.Type)">
            <summary>
            Determines whether [is underlying enum] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetMethodInfos(System.Type)">
            <summary>
            Gets the method infos.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Reflection.MethodInfo[].</returns>
        </member>
        <member name="M:ServiceStack.Text.PlatformExtensions.GetPropertyInfos(System.Type)">
            <summary>
            Gets the property infos.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Reflection.PropertyInfo[].</returns>
        </member>
        <member name="T:ServiceStack.Text.Reflection.StaticAccessors">
            <summary>
            Class StaticAccessors.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Reflection.StaticAccessors.GetValueGetter(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Gets the value getter.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="type">The type.</param>
            <returns>Func&lt;System.Object, System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.Reflection.StaticAccessors.GetValueGetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the value getter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>Func&lt;T, System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.Reflection.StaticAccessors.GetValueGetter``1(System.Reflection.FieldInfo)">
            <summary>
            Gets the value getter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>Func&lt;T, System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.Reflection.StaticAccessors.GetValueSetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the value setter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>Action&lt;T, System.Object&gt;.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:ServiceStack.Text.StreamExtensions">
            <summary>
            Class StreamExtensions.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.StreamExtensions.DefaultBufferSize">
            <summary>
            @jonskeet: Collection of utility methods which operate on streams.
            r285, February 26th 2009: http://www.yoda.arachsys.com/csharp/miscutil/
            </summary>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.WriteTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Writes to.
            </summary>
            <param name="inStream">The in stream.</param>
            <param name="outStream">The out stream.</param>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.ReadLines(System.IO.StreamReader)">
            <summary>
            Reads the lines.
            </summary>
            <param name="reader">The reader.</param>
            <returns>IEnumerable&lt;System.String&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.ReadFully(System.IO.Stream)">
            <summary>
            Reads the given stream up to the end, returning the data as a byte
            array.
            </summary>
            <param name="input">The input.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.ReadFully(System.IO.Stream,System.Int32)">
            <summary>
            Reads the given stream up to the end, returning the data as a byte
            array, using the given buffer size.
            </summary>
            <param name="input">The input.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">bufferSize</exception>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Reads the given stream up to the end, returning the data as a byte
            array, using the given buffer for transferring data. Note that the
            current contents of the buffer is ignored, so the buffer needn't
            be cleared beforehand.
            </summary>
            <param name="input">The input.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.ArgumentNullException">
            buffer
            or
            input
            </exception>
            <exception cref="T:System.ArgumentException">Buffer has length of 0</exception>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies all the data from one stream into another.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies all the data from one stream into another, using a buffer
            of the given size.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">bufferSize</exception>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copies all the data from one stream into another, using the given
            buffer for transferring data. Note that the current contents of
            the buffer is ignored, so the buffer needn't be cleared beforehand.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            buffer
            or
            input
            or
            output
            </exception>
            <exception cref="T:System.ArgumentException">Buffer has length of 0</exception>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.ReadExactly(System.IO.Stream,System.Int32)">
            <summary>
            Reads exactly the given number of bytes from the specified stream.
            If the end of the stream is reached before the specified amount
            of data is read, an exception is thrown.
            </summary>
            <param name="input">The input.</param>
            <param name="bytesToRead">The bytes to read.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.ReadExactly(System.IO.Stream,System.Byte[])">
            <summary>
            Reads into a buffer, filling it completely.
            </summary>
            <param name="input">The input.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.ReadExactly(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Reads exactly the given number of bytes from the specified stream,
            into the given buffer, starting at position 0 of the array.
            </summary>
            <param name="input">The input.</param>
            <param name="buffer">The buffer.</param>
            <param name="bytesToRead">The bytes to read.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.ReadExactly(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads exactly the given number of bytes from the specified stream,
            into the given buffer, starting at position 0 of the array.
            </summary>
            <param name="input">The input.</param>
            <param name="buffer">The buffer.</param>
            <param name="startIndex">The start index.</param>
            <param name="bytesToRead">The bytes to read.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.ArgumentNullException">
            input
            or
            buffer
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex
            or
            bytesToRead
            </exception>
        </member>
        <member name="M:ServiceStack.Text.StreamExtensions.ReadExactlyFast(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Same as ReadExactly, but without the argument checks.
            </summary>
            <param name="fromStream">From stream.</param>
            <param name="intoBuffer">The into buffer.</param>
            <param name="startAtIndex">The start at index.</param>
            <param name="bytesToRead">The bytes to read.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.IO.EndOfStreamException"></exception>
        </member>
        <member name="T:ServiceStack.Text.StringExtensions">
            <summary>
            Class StringExtensions.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.StringExtensions.LowerCaseOffset">
            <summary>
            The lower case offset
            </summary>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.To``1(System.String)">
            <summary>
            To the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.To``1(System.String,``0)">
            <summary>
            To the specified default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ToOrDefaultValue``1(System.String)">
            <summary>
            To the or default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.To(System.String,System.Type)">
            <summary>
            To the specified type.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.BaseConvert(System.String,System.Int32,System.Int32)">
            <summary>
            Converts from base: 0 - 62
            </summary>
            <param name="source">The source.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.EncodeXml(System.String)">
            <summary>
            Encodes the XML.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.EncodeJson(System.String)">
            <summary>
            Encodes the json.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.EncodeJsv(System.String)">
            <summary>
            Encodes the JSV.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.DecodeJsv(System.String)">
            <summary>
            Decodes the JSV.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.UrlEncode(System.String)">
            <summary>
            URLs the encode.
            </summary>
            <param name="text">The text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.UrlDecode(System.String)">
            <summary>
            URLs the decode.
            </summary>
            <param name="text">The text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.HexEscape(System.String,System.Char[])">
            <summary>
            Hexadecimals the escape.
            </summary>
            <param name="text">The text.</param>
            <param name="anyCharOf">Any character of.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.HexUnescape(System.String,System.Char[])">
            <summary>
            Hexadecimals the unescape.
            </summary>
            <param name="text">The text.</param>
            <param name="anyCharOf">Any character of.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.UrlFormat(System.String,System.String[])">
            <summary>
            URLs the format.
            </summary>
            <param name="url">The URL.</param>
            <param name="urlComponents">The URL components.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ToRot13(System.String)">
            <summary>
            To the rot13.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.WithTrailingSlash(System.String)">
            <summary>
            Withes the trailing slash.
            </summary>
            <param name="path">The path.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">path</exception>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.AppendPath(System.String,System.String[])">
            <summary>
            Appends the path.
            </summary>
            <param name="uri">The URI.</param>
            <param name="uriComponents">The URI components.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.AppendUrlPaths(System.String,System.String[])">
            <summary>
            Appends the URL paths.
            </summary>
            <param name="uri">The URI.</param>
            <param name="uriComponents">The URI components.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.AppendUrlPathsRaw(System.String,System.String[])">
            <summary>
            Appends the URL paths raw.
            </summary>
            <param name="uri">The URI.</param>
            <param name="uriComponents">The URI components.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.FromAsciiBytes(System.Byte[])">
            <summary>
            Froms the ASCII bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ToAsciiBytes(System.String)">
            <summary>
            To the ASCII bytes.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.FromUtf8Bytes(System.Byte[])">
            <summary>
            Froms the UTF8 bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ToUtf8Bytes(System.String)">
            <summary>
            To the UTF8 bytes.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ToUtf8Bytes(System.Int32)">
            <summary>
            To the UTF8 bytes.
            </summary>
            <param name="intVal">The int value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ToUtf8Bytes(System.Int64)">
            <summary>
            To the UTF8 bytes.
            </summary>
            <param name="longVal">The long value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ToUtf8Bytes(System.Double)">
            <summary>
            To the UTF8 bytes.
            </summary>
            <param name="doubleVal">The double value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.FastToUtf8Bytes(System.String)">
            <summary>
            Skip the encoding process for 'safe strings'
            </summary>
            <param name="strVal">The string value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.SplitOnFirst(System.String,System.Char)">
            <summary>
            Splits the on first.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.SplitOnFirst(System.String,System.String)">
            <summary>
            Splits the on first.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.SplitOnLast(System.String,System.Char)">
            <summary>
            Splits the on last.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.SplitOnLast(System.String,System.String)">
            <summary>
            Splits the on last.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.WithoutExtension(System.String)">
            <summary>
            Withouts the extension.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>System.String.</returns>
        </member>
        <member name="F:ServiceStack.Text.StringExtensions.DirSep">
            <summary>
            The dir sep
            </summary>
        </member>
        <member name="F:ServiceStack.Text.StringExtensions.AltDirSep">
            <summary>
            The alt dir sep
            </summary>
        </member>
        <member name="F:ServiceStack.Text.StringExtensions.DirSeps">
            <summary>
            The dir seps
            </summary>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ParentDirectory(System.String)">
            <summary>
            Parents the directory.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ToJsv``1(``0)">
            <summary>
            To the JSV.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.FromJsv``1(System.String)">
            <summary>
            Froms the JSV.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsv">The JSV.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ToJson``1(``0)">
            <summary>
            To the json.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.FromJson``1(System.String)">
            <summary>
            Froms the json.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The json.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formats the with.
            </summary>
            <param name="text">The text.</param>
            <param name="args">The arguments.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.Fmt(System.String,System.Object[])">
            <summary>
            FMTs the specified arguments.
            </summary>
            <param name="text">The text.</param>
            <param name="args">The arguments.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            Startses the with ignore case.
            </summary>
            <param name="text">The text.</param>
            <param name="startsWith">The starts with.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            Endses the with ignore case.
            </summary>
            <param name="text">The text.</param>
            <param name="endsWith">The ends with.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ReadAllText(System.String)">
            <summary>
            Reads all text.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.IndexOfAny(System.String,System.String[])">
            <summary>
            Indexes the of any.
            </summary>
            <param name="text">The text.</param>
            <param name="needles">The needles.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.IndexOfAny(System.String,System.Int32,System.String[])">
            <summary>
            Indexes the of any.
            </summary>
            <param name="text">The text.</param>
            <param name="startIndex">The start index.</param>
            <param name="needles">The needles.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ExtractContents(System.String,System.String,System.String)">
            <summary>
            Extracts the contents.
            </summary>
            <param name="fromText">From text.</param>
            <param name="startAfter">The start after.</param>
            <param name="endAt">The end at.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ExtractContents(System.String,System.String,System.String,System.String)">
            <summary>
            Extracts the contents.
            </summary>
            <param name="fromText">From text.</param>
            <param name="uniqueMarker">The unique marker.</param>
            <param name="startAfter">The start after.</param>
            <param name="endAt">The end at.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">uniqueMarker
            or
            startAfter
            or
            endAt</exception>
        </member>
        <member name="F:ServiceStack.Text.StringExtensions.StripHtmlRegEx">
            <summary>
            The strip HTML reg ex
            </summary>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.StripHtml(System.String)">
            <summary>
            Strips the HTML.
            </summary>
            <param name="html">The HTML.</param>
            <returns>System.String.</returns>
        </member>
        <member name="F:ServiceStack.Text.StringExtensions.StripBracketsRegEx">
            <summary>
            The strip brackets reg ex
            </summary>
        </member>
        <member name="F:ServiceStack.Text.StringExtensions.StripBracesRegEx">
            <summary>
            The strip braces reg ex
            </summary>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.StripMarkdownMarkup(System.String)">
            <summary>
            Strips the markdown markup.
            </summary>
            <param name="markdown">The markdown.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ToCamelCase(System.String)">
            <summary>
            To the camel case.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="F:ServiceStack.Text.StringExtensions.TextInfo">
            <summary>
            The text information
            </summary>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ToTitleCase(System.String)">
            <summary>
            To the title case.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.ToLowercaseUnderscore(System.String)">
            <summary>
            To the lowercase underscore.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.SafeSubstring(System.String,System.Int32)">
            <summary>
            Safes the substring.
            </summary>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.SafeSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            Safes the substring.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.IsAnonymousType(System.Type)">
            <summary>
            Determines whether [is anonymous type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is anonymous type] [the specified type]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.CompareIgnoreCase(System.String,System.String)">
            <summary>
            Compares the ignore case.
            </summary>
            <param name="strA">The string a.</param>
            <param name="strB">The string b.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.EndsWithInvariant(System.String,System.String)">
            <summary>
            Endses the with invariant.
            </summary>
            <param name="str">The string.</param>
            <param name="endsWith">The ends with.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:ServiceStack.Text.StringExtensions.DirSeparatorChar">
            <summary>
            The dir separator character
            </summary>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.InvariantComparison">
            <summary>
            Invariants the comparison.
            </summary>
            <returns>StringComparison.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.InvariantComparisonIgnoreCase">
            <summary>
            Invariants the comparison ignore case.
            </summary>
            <returns>StringComparison.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.InvariantComparer">
            <summary>
            Invariants the comparer.
            </summary>
            <returns>StringComparer.</returns>
        </member>
        <member name="M:ServiceStack.Text.StringExtensions.InvariantComparerIgnoreCase">
            <summary>
            Invariants the comparer ignore case.
            </summary>
            <returns>StringComparer.</returns>
        </member>
        <member name="T:ServiceStack.Text.Support.DoubleConverter">
            <summary>
            A class to allow the conversion of doubles to string representations of
            their exact decimal values. The implementation aims for readability over
            efficiency.
            
            Courtesy of @JonSkeet
            http://www.yoda.arachsys.com/csharp/DoubleConverter.cs
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Support.DoubleConverter.ToExactString(System.Double)">
            <summary>
            Converts the given double to a string representation of its
            exact decimal value.
            </summary>
            <param name="d">The double to convert.</param>
            <returns>A string representation of the double's exact decimal value.</returns>
        </member>
        <member name="T:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal">
            <summary>
            Class ArbitraryDecimal.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.digits">
            <summary>
            The digits
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.decimalPoint">
            <summary> 
            How many digits are *after* the decimal point
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="T:ServiceStack.Text.Support.TypePair">
            <summary>
            Class TypePair.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Support.TypePair.#ctor(System.Type[],System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Text.Support.TypePair"/> class.
            </summary>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
        </member>
        <member name="M:ServiceStack.Text.Support.TypePair.Equals(ServiceStack.Text.Support.TypePair)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.Text.Support.TypePair.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.Support.TypePair.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:ServiceStack.Text.Support.TypePair.Args1">
            <summary>
            Gets or sets the args1.
            </summary>
            <value>The args1.</value>
        </member>
        <member name="P:ServiceStack.Text.Support.TypePair.Arg2">
            <summary>
            Gets or sets the arg2.
            </summary>
            <value>The arg2.</value>
        </member>
        <member name="T:ServiceStack.Text.SystemTime">
            <summary>
            Class SystemTime.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.SystemTime.UtcDateTimeResolver">
            <summary>
            The UTC date time resolver
            </summary>
        </member>
        <member name="P:ServiceStack.Text.SystemTime.Now">
            <summary>
            Gets the now.
            </summary>
            <value>The now.</value>
        </member>
        <member name="P:ServiceStack.Text.SystemTime.UtcNow">
            <summary>
            Gets the UTC now.
            </summary>
            <value>The UTC now.</value>
        </member>
        <member name="T:ServiceStack.Text.TextExtensions">
            <summary>
            Class TextExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.TextExtensions.ToCsvField(System.String)">
            <summary>
            To the CSV field.
            </summary>
            <param name="text">The text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.TextExtensions.ToCsvField(System.Object)">
            <summary>
            To the CSV field.
            </summary>
            <param name="text">The text.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.TextExtensions.FromCsvField(System.String)">
            <summary>
            Froms the CSV field.
            </summary>
            <param name="text">The text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.TextExtensions.FromCsvFields(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Froms the CSV fields.
            </summary>
            <param name="texts">The texts.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.TextExtensions.FromCsvFields(System.String[])">
            <summary>
            Froms the CSV fields.
            </summary>
            <param name="texts">The texts.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.Text.TextExtensions.SerializeToString``1(``0)">
            <summary>
            Serializes to string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.Text.Tracer">
            <summary>
            Class Tracer.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.Tracer.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="T:ServiceStack.Text.Tracer.NullTracer">
            <summary>
            Class NullTracer.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Tracer.NullTracer.WriteDebug(System.String)">
            <summary>
            Writes the debug.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ServiceStack.Text.Tracer.NullTracer.WriteDebug(System.String,System.Object[])">
            <summary>
            Writes the debug.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.Text.Tracer.NullTracer.WriteWarning(System.String)">
            <summary>
            Writes the warning.
            </summary>
            <param name="warning">The warning.</param>
        </member>
        <member name="M:ServiceStack.Text.Tracer.NullTracer.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes the warning.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.Text.Tracer.NullTracer.WriteError(System.Exception)">
            <summary>
            Writes the error.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:ServiceStack.Text.Tracer.NullTracer.WriteError(System.String)">
            <summary>
            Writes the error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ServiceStack.Text.Tracer.NullTracer.WriteError(System.String,System.Object[])">
            <summary>
            Writes the error.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:ServiceStack.Text.Tracer.ConsoleTracer">
            <summary>
            Class ConsoleTracer.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Tracer.ConsoleTracer.WriteDebug(System.String)">
            <summary>
            Writes the debug.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ServiceStack.Text.Tracer.ConsoleTracer.WriteDebug(System.String,System.Object[])">
            <summary>
            Writes the debug.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.Text.Tracer.ConsoleTracer.WriteWarning(System.String)">
            <summary>
            Writes the warning.
            </summary>
            <param name="warning">The warning.</param>
        </member>
        <member name="M:ServiceStack.Text.Tracer.ConsoleTracer.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes the warning.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.Text.Tracer.ConsoleTracer.WriteError(System.Exception)">
            <summary>
            Writes the error.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:ServiceStack.Text.Tracer.ConsoleTracer.WriteError(System.String)">
            <summary>
            Writes the error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ServiceStack.Text.Tracer.ConsoleTracer.WriteError(System.String,System.Object[])">
            <summary>
            Writes the error.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:ServiceStack.Text.TranslateListWithElements">
            <summary>
            Class TranslateListWithElements.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.TranslateListWithElements.TranslateICollectionCache">
            <summary>
            The translate i collection cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.TranslateListWithElements.TranslateToGenericICollectionCache(System.Object,System.Type,System.Type)">
            <summary>
            Translates to generic i collection cache.
            </summary>
            <param name="from">From.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <param name="elementType">Type of the element.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:ServiceStack.Text.TranslateListWithElements.TranslateConvertibleICollectionCache">
            <summary>
            The translate convertible i collection cache
            </summary>
        </member>
        <member name="M:ServiceStack.Text.TranslateListWithElements.TranslateToConvertibleGenericICollectionCache(System.Object,System.Type,System.Type)">
            <summary>
            Translates to convertible generic i collection cache.
            </summary>
            <param name="from">From.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <param name="fromElementType">Type of from element.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.TranslateListWithElements.TryTranslateToGenericICollection(System.Type,System.Type,System.Object)">
            <summary>
            Tries the translate to generic i collection.
            </summary>
            <param name="fromPropertyType">Type of from property.</param>
            <param name="toPropertyType">Type of to property.</param>
            <param name="fromValue">From value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.Text.ConvertibleTypeKey">
            <summary>
            Class ConvertibleTypeKey.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.ConvertibleTypeKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Text.ConvertibleTypeKey"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.ConvertibleTypeKey.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Text.ConvertibleTypeKey"/> class.
            </summary>
            <param name="toInstanceType">Type of to instance.</param>
            <param name="fromElemenetType">Type of from elemenet.</param>
        </member>
        <member name="M:ServiceStack.Text.ConvertibleTypeKey.Equals(ServiceStack.Text.ConvertibleTypeKey)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.Text.ConvertibleTypeKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.ConvertibleTypeKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:ServiceStack.Text.ConvertibleTypeKey.ToInstanceType">
            <summary>
            Gets or sets the type of to instance.
            </summary>
            <value>The type of to instance.</value>
        </member>
        <member name="P:ServiceStack.Text.ConvertibleTypeKey.FromElemenetType">
            <summary>
            Gets or sets the type of from elemenet.
            </summary>
            <value>The type of from elemenet.</value>
        </member>
        <member name="T:ServiceStack.Text.TranslateListWithElements`1">
            <summary>
            Class TranslateListWithElements.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.Text.TranslateListWithElements`1.CreateInstance(System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.TranslateListWithElements`1.TranslateToIList(System.Collections.IList,System.Type)">
            <summary>
            Translates to i list.
            </summary>
            <param name="fromList">From list.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <returns>IList.</returns>
        </member>
        <member name="M:ServiceStack.Text.TranslateListWithElements`1.LateBoundTranslateToGenericICollection(System.Object,System.Type)">
            <summary>
            Lates the bound translate to generic i collection.
            </summary>
            <param name="fromList">From list.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.TranslateListWithElements`1.TranslateToGenericICollection(System.Collections.Generic.ICollection{`0},System.Type)">
            <summary>
            Translates to generic i collection.
            </summary>
            <param name="fromList">From list.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <returns>ICollection&lt;T&gt;.</returns>
        </member>
        <member name="T:ServiceStack.Text.TranslateListWithConvertibleElements`2">
            <summary>
            Class TranslateListWithConvertibleElements.
            </summary>
            <typeparam name="TFrom">The type of the t from.</typeparam>
            <typeparam name="TTo">The type of the t to.</typeparam>
        </member>
        <member name="F:ServiceStack.Text.TranslateListWithConvertibleElements`2.ConvertFn">
            <summary>
            The convert function
            </summary>
        </member>
        <member name="M:ServiceStack.Text.TranslateListWithConvertibleElements`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.TranslateListWithConvertibleElements`2"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.TranslateListWithConvertibleElements`2.LateBoundTranslateToGenericICollection(System.Object,System.Type)">
            <summary>
            Lates the bound translate to generic i collection.
            </summary>
            <param name="fromList">From list.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.TranslateListWithConvertibleElements`2.TranslateToGenericICollection(System.Collections.Generic.ICollection{`0},System.Type)">
            <summary>
            Translates to generic i collection.
            </summary>
            <param name="fromList">From list.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <returns>ICollection&lt;TTo&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.TranslateListWithConvertibleElements`2.GetConvertFn">
            <summary>
            Gets the convert function.
            </summary>
            <returns>Func&lt;TFrom, TTo&gt;.</returns>
        </member>
        <member name="T:ServiceStack.Text.TypeConfig">
            <summary>
            Class TypeConfig.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.TypeConfig.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:ServiceStack.Text.TypeConfig.EnableAnonymousFieldSetterses">
            <summary>
            The enable anonymous field setterses
            </summary>
        </member>
        <member name="F:ServiceStack.Text.TypeConfig.Properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="F:ServiceStack.Text.TypeConfig.Fields">
            <summary>
            The fields
            </summary>
        </member>
        <member name="M:ServiceStack.Text.TypeConfig.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Text.TypeConfig"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:ServiceStack.Text.TypeConfig`1">
            <summary>
            Class TypeConfig.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.Text.TypeConfig`1.config">
            <summary>
            The configuration
            </summary>
        </member>
        <member name="M:ServiceStack.Text.TypeConfig`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.Text.TypeConfig`1"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.TypeConfig`1.GetState">
            <summary>
            Gets the state.
            </summary>
            <returns>TypeConfig.</returns>
        </member>
        <member name="P:ServiceStack.Text.TypeConfig`1.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:ServiceStack.Text.TypeConfig`1.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:ServiceStack.Text.TypeConfig`1.EnableAnonymousFieldSetters">
            <summary>
            Gets or sets a value indicating whether [enable anonymous field setters].
            </summary>
            <value><c>true</c> if [enable anonymous field setters]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ServiceStack.Text.TypeSerializer">
            <summary>
            Creates an instance of a Type from a string value
            </summary>
        </member>
        <member name="F:ServiceStack.Text.TypeSerializer.DoubleQuoteString">
            <summary>
            The double quote string
            </summary>
        </member>
        <member name="F:ServiceStack.Text.TypeSerializer.UTF8EncodingWithoutBom">
            <summary>
            The ut f8 encoding without bom
            </summary>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.CanCreateFromString(System.Type)">
            <summary>
            Determines whether the specified type is convertible from string.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is convertible from string; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.DeserializeFromString``1(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.DeserializeFromReader``1(System.IO.TextReader)">
            <summary>
            Deserializes from reader.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.DeserializeFromString(System.String,System.Type)">
            <summary>
            Parses the specified type.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.DeserializeFromReader(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes from reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.SerializeToString``1(``0)">
            <summary>
            Serializes to string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.SerializeToString(System.Object,System.Type)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.SerializeToWriter``1(``0,System.IO.TextWriter)">
            <summary>
            Serializes to writer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.SerializeToWriter(System.Object,System.Type,System.IO.TextWriter)">
            <summary>
            Serializes to writer.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.SerializeToStream``1(``0,System.IO.Stream)">
            <summary>
            Serializes to stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.SerializeToStream(System.Object,System.Type,System.IO.Stream)">
            <summary>
            Serializes to stream.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.Clone``1(``0)">
            <summary>
            Clones the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.DeserializeFromStream``1(System.IO.Stream)">
            <summary>
            Deserializes from stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream">The stream.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.DeserializeFromStream(System.Type,System.IO.Stream)">
            <summary>
            Deserializes from stream.
            </summary>
            <param name="type">The type.</param>
            <param name="stream">The stream.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.ToStringDictionary``1(``0)">
            <summary>
            Useful extension method to get the Dictionary[string,string] representation of any POCO type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns>Dictionary&lt;System.String, System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.Dump``1(``0)">
            <summary>
            Recursively prints the contents of any POCO object in a human-friendly, readable format
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.PrintDump``1(``0)">
            <summary>
            Print Dump to Console.WriteLine
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.Print(System.String,System.Object[])">
            <summary>
            Print string.Format to Console.WriteLine
            </summary>
            <param name="text">The text.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.SerializeAndFormat``1(``0)">
            <summary>
            Serializes the and format.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.Dump(System.Delegate)">
            <summary>
            Dumps the specified function.
            </summary>
            <param name="fn">The function.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.Text.TypeSerializer`1">
            <summary>
            Class TypeSerializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer`1.CanCreateFromString(System.Type)">
            <summary>
            Determines whether this serializer can create the specified type from a string.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if this instance [can create from string] the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer`1.DeserializeFromString(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer`1.DeserializeFromReader(System.IO.TextReader)">
            <summary>
            Deserializes from reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer`1.SerializeToString(`0)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer`1.SerializeToWriter(`0,System.IO.TextWriter)">
            <summary>
            Serializes to writer.
            </summary>
            <param name="value">The value.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:XLabs.Serialization.ServiceStack.JsonSerializer">
            <summary>
            JSON serializer using ServiceStack.Text library.
            </summary>
            <remarks>ServiceStack.Text copyright information.
            Copyright (c) 2007-2011, Demis Bellot, ServiceStack.
            http://www.servicestack.net
            All rights reserved.
            https://github.com/ServiceStack/ServiceStack.Text/blob/master/LICENSE</remarks>
        </member>
        <member name="M:XLabs.Serialization.ServiceStack.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Serialization.ServiceStack.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Serialization.ServiceStack.JsonSerializer.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Serialization.ServiceStack.JsonSerializer"/> class.
            </summary>
            <param name="emitCamelCaseNames">Emit camelcase names</param>
            <param name="accurateDateTime">Set to true if you need DateTime's to not lose accuracy</param>
        </member>
        <member name="M:XLabs.Serialization.ServiceStack.JsonSerializer.SetSerializeDelegate``1(System.Func{``0,System.String})">
            <summary>
            Sets the serialize delegate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializerDelegate">The serializer delegate.</param>
        </member>
        <member name="M:XLabs.Serialization.ServiceStack.JsonSerializer.SetDeserializeDelegate``1(System.Func{System.String,``0})">
            <summary>
            Sets the deserialize delegate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializerDelegate">The deserializer delegate.</param>
        </member>
        <member name="M:XLabs.Serialization.ServiceStack.JsonSerializer.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:XLabs.Serialization.ServiceStack.JsonSerializer.Serialize``1(``0)">
            <summary>
            Serializes the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:XLabs.Serialization.ServiceStack.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <returns>T.</returns>
        </member>
        <member name="M:XLabs.Serialization.ServiceStack.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="P:XLabs.Serialization.ServiceStack.JsonSerializer.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
    </members>
</doc>
